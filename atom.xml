<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nchuacm</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://nchuacm.github.io/"/>
  <updated>2021-12-24T09:00:39.237Z</updated>
  <id>http://nchuacm.github.io/</id>
  
  <author>
    <name>nchuacm</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Markdown语法教程</title>
    <link href="http://nchuacm.github.io/learn_note/markdown_base/"/>
    <id>http://nchuacm.github.io/learn_note/markdown_base/</id>
    <published>2021-12-24T05:00:05.000Z</published>
    <updated>2021-12-24T09:00:39.237Z</updated>
    
    <content type="html"><![CDATA[<p>从网上收集的markdown语法教程</p><a id="more"></a><h1 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h1><p>&emsp;&emsp;Markdown 语言由约翰·格鲁伯(John Gruber)于2004年创建，是一种轻量级标记语言。Markdown允许人们使用易读易写的纯文本来编写带样式的文档，有点类似html，不过它比html简单一些。Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。使用Markdown 编写的文档后缀为 .md, .markdown，比如github仓库里的README.md文档。</p><p>&emsp;&emsp;关于Markdown的编辑器，可分为以下三类：</p><ol><li>平台集成工具：各大在线博客、社区平台自带的写作工具，比如CSDN、博客园、简书等。</li><li>独立软件类：在本地上使用的独立软件，可以编辑本地文件，比如Typora、Haroopad等。</li><li>插件类：有些编辑器安装相应的插件，可以具有Markdown的功能，比如Atom、VS code、Sublime Text等。</li></ol><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>&emsp;&emsp;标题可以使用两种方式来设置，一种是用“=”和“-”，一种是用“#”。</p><ol><li>使用“=”和“-”符号，在标题的下一行加一个“=”，就会有一级标题的效果，如果加“-”的话就是二级标题。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 一级标题</span><br><span class="line">&#x3D;</span><br><span class="line">二级标题</span><br><span class="line">-</span><br></pre></td></tr></table></figure>效果如下：</li></ol><p><img src="/images/learn_note/markdown_base/1581056192563.png" alt=""></p><p>&emsp;&emsp;需要注意的是，使用这种方式的标题，上一行如果是普通文本，两行之间要加一个换行，不然上一行文本也会有标题的样式。</p><ol start="2"><li>使用“#”符号，在标题的前面加“#”符号就好了，加几个“#”就代表几级标题，最多支持6级标题。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>效果如下：</li></ol><p><img src="/images/learn_note/markdown_base/1581056288407.png" alt=""></p><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><h2 id="简单字体"><a href="#简单字体" class="headerlink" title="简单字体"></a>简单字体</h2><p>Markdown 可以使用以下几种字体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*斜体文本*</span><br><span class="line">_斜体文本_</span><br><span class="line">**粗体文本**</span><br><span class="line">__粗体文本__</span><br><span class="line">***粗斜体文本***</span><br><span class="line">___粗斜体文本___</span><br><span class="line">&lt;u&gt;带下划线文本&lt;&#x2F;u&gt;</span><br><span class="line">~~带删除线文本~~</span><br></pre></td></tr></table></figure><p>效果如下：<br>&emsp;&emsp; <em>斜体文本</em><br>&emsp;&emsp; <em>斜体文本</em><br>&emsp;&emsp; <strong>粗体文本</strong><br>&emsp;&emsp; <strong>粗体文本</strong><br>&emsp;&emsp; <strong><em>粗斜体文本</em></strong><br>&emsp;&emsp; <strong><em>粗斜体文本</em></strong><br>&emsp;&emsp; <u>带下划线文本</u><br>&emsp;&emsp; <del>带删除线文本</del></p><h2 id="自定义字体"><a href="#自定义字体" class="headerlink" title="自定义字体"></a>自定义字体</h2><p>Markdown的最初目标就是为纯写作而生的，因此，它并没有考虑文字的更多样式。如果想使用更多字体样式，可以借助html的font标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;font color&#x3D;red&gt;红色字体&lt;&#x2F;font&gt;</span><br><span class="line">&lt;font size&#x3D;6&gt;6号字体&lt;&#x2F;font&gt;</span><br><span class="line">&lt;font color&#x3D;red size&#x3D;6&gt;6号红色字体&lt;&#x2F;font&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>&emsp;&emsp; <font color=red>红色字体</font></p><p>&emsp;&emsp; <font size=6>6号字体</font></p><p>&emsp;&emsp; <font color=red size=6>6号红色字体</font></p><h1 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h1><p>Markdown不能直接用键盘输入的空格和回车来表示空格，需要用特殊符号。<br><code>&amp;ensp;</code>或<code>&amp;#8194;</code>表示半角空格(En Space)，占一个字符，相当于半个汉字的长度。<br><code>&amp;emsp;</code>或<code>&amp;#8195;</code>表示全角空格(Em Space)，占两个字符，相当于一个汉字的长度。<br><code>&amp;nbsp;</code>或<code>&amp;#160;</code>不换行空格(No-Break Space)，占一个字符，相当于一个字符”n”的长度。<br>半角空格和全角空格推荐在中文里使用，不换行空格推荐在英文里使用。</p><h1 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h1><p>markdown里敲多个换行只能显示一个，如果想显示多个换行，需要用<code>&lt;br&gt;</code>或者<code>&lt;br/&gt;</code>来表示。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>引用的文字段落会高亮显示，方法是在文字开头加”&gt;”符号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 最外层</span><br><span class="line">&gt;&gt; 第一层嵌套</span><br><span class="line">&gt;&gt;&gt; 第二层嵌套</span><br></pre></td></tr></table></figure><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><h2 id="简单图片"><a href="#简单图片" class="headerlink" title="简单图片"></a>简单图片</h2><p>如果是想简单的显示图片，使用以下方式就好了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](图片地址)</span><br></pre></td></tr></table></figure><p>图片链接地址可以是本地图片文件地址，也可以是网络图片地址。</p><p>也可以给图片添加说明和标题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片说明文字](图片链接地址 &quot;图片标题&quot;)</span><br></pre></td></tr></table></figure><p>图片说明文字会在图片无法加载时显示，图片正常加载时说明文字不显示，下面是一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![这是一张无法加载的图片](错误的图片地址 &quot;title&quot;)</span><br></pre></td></tr></table></figure><p>显示为<br><img src="%E9%94%99%E8%AF%AF%E7%9A%84%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80" alt="这是一张无法加载的图片" title="title"><br>如果图片有标题，当鼠标停在图片上时会显示出来，即使图片无法加载，鼠标停靠时也会显示，下面是一个例子，请读者自行尝试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![涅普迪努](&#x2F;images&#x2F;learn_note&#x2F;markdown_base&#x2F;nepnep.png &quot;我可爱吗^_^&quot;)</span><br></pre></td></tr></table></figure><p><img src="/images/learn_note/markdown_base/nepnep.png" alt="涅普迪努" title="我可爱吗^_^"></p><h2 id="自定义图片"><a href="#自定义图片" class="headerlink" title="自定义图片"></a>自定义图片</h2><p>Markdown无法自定义图片的宽度和高度，如果想改变的话需要借助html的img标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img width&#x3D;100 height&#x3D;160 src&#x3D;&quot;&#x2F;images&#x2F;learn_note&#x2F;markdown_base&#x2F;nepnep.png&quot; title&#x3D;&quot;我是变小后的涅普迪努&quot;&gt;&lt;&#x2F;img&gt;</span><br></pre></td></tr></table></figure><p>下面是一张100×160的图片<br><img width=100 height=160 src="/images/learn_note/markdown_base/nepnep.png" title="我是变小后的涅普迪努"></img></p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><h2 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h2><p>markdown可以使用两种方法创建链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[链接名称](链接地址)</span><br><span class="line">&lt;链接地址&gt;</span><br></pre></td></tr></table></figure><p>以github主页为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[github](https:&#x2F;&#x2F;github.com)</span><br><span class="line">&lt;https:&#x2F;&#x2F;github.com&gt;</span><br></pre></td></tr></table></figure><p>效果如下：<br><a href="https://github.com" target="_blank" rel="noopener">github</a><br><a href="https://github.com" target="_blank" rel="noopener">https://github.com</a></p><h2 id="内部链接"><a href="#内部链接" class="headerlink" title="内部链接"></a>内部链接</h2><p>可以使用内部链接跳转到本文内某个标题的位置，语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[链接名字][#标题名字]</span><br></pre></td></tr></table></figure><p>比如想跳转转到本文的“Markdown简介”的位置，可以用下面的代码实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Markdown简介](#Markdown简介)</span><br></pre></td></tr></table></figure><p><a href="#Markdown简介">Markdown简介</a></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line">* 第三项</span><br><span class="line"></span><br><span class="line">+ 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">+ 第三项</span><br><span class="line"></span><br><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>有序列表使用数字并加上 . 号来表示，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><p>markdown会对数字重新按顺序编号，比如下面代码显示的编号任然是1.2.3.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">1. 第二项</span><br><span class="line">237. 第三项</span><br></pre></td></tr></table></figure><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h2 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h2><p>列表嵌套只需在子列表中的选项添加四个空格即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。<br>语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure><p>显示效果：</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><p>设置表格的对齐方式：</p><ul><li>-: 设置内容和标题栏居右对齐。</li><li>:- 设置内容和标题栏居左对齐。</li><li>:-: 设置内容和标题栏居中对齐。</li></ul><p>实例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐的一列 | 右对齐的一列 | 居中对齐的一列 |</span><br><span class="line">| :----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><p> 显示效果：</p><table><thead><tr><th align="left">左对齐的一列</th><th align="right">右对齐的一列</th><th align="center">居中对齐的一列</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h2><p>代码片段可以用一个或两个反引号”`“包起来，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c语言常用&#96;scanf()&#96;和&#96;&#96;printf()&#96;&#96;函数来输入输出。</span><br></pre></td></tr></table></figure><p>显示为：c语言常用<code>scanf()</code>和<code>printf()</code>函数来输入输出。</p><h2 id="代码段落"><a href="#代码段落" class="headerlink" title="代码段落"></a>代码段落</h2><p>代码段落可以用三个反引号”```”或三个”~~~”来显示(三个以上也可以)，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, int argv[])</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;hello world!\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#96;&#96;&#96;</span><br></pre></td></tr></table></figure><p>显示为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, int argv[])</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;hello world!\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在前面的三个反引号后面加入编程语言的关键字，还可以显示语法高亮，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;python</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">def sigmoid(self, input):</span><br><span class="line">    return 1.0 &#x2F; (1.0 + np.exp(-input))</span><br><span class="line">&#96;&#96;&#96;</span><br></pre></td></tr></table></figure><p>显示为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(self, input)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span> / (<span class="number">1.0</span> + np.exp(-input))</span><br></pre></td></tr></table></figure><p>以下为常用的语言的语法关键字</p><table><thead><tr><th>语言</th><th>关键字</th></tr></thead><tbody><tr><td>C</td><td>cpp, c</td></tr><tr><td>Java</td><td>java</td></tr><tr><td>Python</td><td>py, python</td></tr><tr><td>Shell</td><td>bash, shell</td></tr><tr><td>C#</td><td>csharp, c#</td></tr><tr><td>CSS</td><td>css</td></tr><tr><td>JavaScript</td><td>js, jscript, javascript</td></tr><tr><td>XML</td><td>xml , xhtml, xslt, html</td></tr><tr><td>PHP</td><td>php</td></tr><tr><td>SQL</td><td>sql</td></tr></tbody></table><h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><p>&emsp;&emsp;markdown里有些字符代表特殊功能，比如 * 代表无序列表开始标志，如果只是想显示这些符号，而不使用符号的特殊功能，需要在符号前加一个 \ ，markdown里需要转义的字符如下：</p><table><thead><tr><th></th><th>原始字符</th><th>显示效果</th></tr></thead><tbody><tr><td>反斜杠</td><td>\\</td><td>\</td></tr><tr><td>反引号</td><td>\`</td><td>`</td></tr><tr><td>星号</td><td>\*</td><td>*</td></tr><tr><td>井号</td><td>\#</td><td>#</td></tr><tr><td>加号</td><td>\+</td><td>+</td></tr><tr><td>减号</td><td>\-</td><td>-</td></tr><tr><td>点</td><td>\.</td><td>.</td></tr><tr><td>感叹号</td><td>\!</td><td>!</td></tr><tr><td>大括号</td><td>\{\}</td><td>{}</td></tr><tr><td>中括号</td><td>\[\]</td><td>[]</td></tr><tr><td>小括号</td><td>\(\)</td><td>()</td></tr></tbody></table><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>&emsp;&emsp;部分markdown平台支持目录自动生成，比如gridea可以用<code>@[TOC]</code>来插入目录，Typora用<code>[TOC]</code>插入目录。如果平台不支持的话，可以使用mardown的编辑器来生成，或者使用上面提到的列表和内部链接自己做一个，当然这样比较麻烦，而且无法与标题自动同步。</p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>markdown支持添加脚注，点击脚注后，会跳转到文档的底部的说明位置，语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[^关键字]</span><br><span class="line">[^关键字]: 脚注说明内容</span><br></pre></td></tr></table></figure><p>第一行代码添加了一个脚注，第二行代码对脚注进行了定义，如果对添加的脚注不进行定义的话，脚注无法显示。markdown在显示脚注的时候会按照顺序进行编号，下面是一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">文本[^第一个脚注]</span><br><span class="line">[^第一个脚注]: 这里是第一个脚注的说明。</span><br><span class="line"></span><br><span class="line">文本[^第二脚注]</span><br><span class="line">[^第二脚注]: 这里是第二个脚注的说明。</span><br></pre></td></tr></table></figure><p>显示结果：<br>文本<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><p>文本<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>markdown可以在一行上连用三个或者三个以上的星号、减号、或者下划线来表示分割线。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">---</span><br><span class="line">___</span><br></pre></td></tr></table></figure><p>显示效果：</p><hr><hr><hr><h2 id="数学公式和画图"><a href="#数学公式和画图" class="headerlink" title="数学公式和画图"></a>数学公式和画图</h2><p>可以参考这个大佬的链接<a href="https://www.jianshu.com/p/e74eb43960a1" target="_blank" rel="noopener">https://www.jianshu.com/p/e74eb43960a1</a><br><br/></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">这里是第一个脚注的说明。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">这里是第二个脚注的说明。</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从网上收集的markdown语法教程&lt;/p&gt;
    
    </summary>
    
    
      <category term="教程" scheme="http://nchuacm.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="markdown" scheme="http://nchuacm.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>UVA-796 Critical Links</title>
    <link href="http://nchuacm.github.io/acm/uva_796/"/>
    <id>http://nchuacm.github.io/acm/uva_796/</id>
    <published>2020-08-31T10:00:00.000Z</published>
    <updated>2021-12-24T08:55:37.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>&emsp;&emsp;<a href="https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=737" target="_blank" rel="noopener">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=737</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>&emsp;&emsp;给出一张无向图，求图的割边。</p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>&emsp;&emsp;大致的思路和求图的割点类似，用tarjan算法解决。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(a, b) (a &lt; b) ? a : b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">1000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">int</span> next;</span><br><span class="line">&#125; node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">&#125; edge;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.a != b.a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.a &lt; b.a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.b &lt; b.b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, bn;</span><br><span class="line">node e[<span class="number">2</span> * MAX_N * MAX_N];</span><br><span class="line">edge bridge[MAX_N];</span><br><span class="line"><span class="keyword">int</span> head[MAX_N];</span><br><span class="line"><span class="keyword">int</span> vis[MAX_N], v_ind;</span><br><span class="line"><span class="keyword">int</span> low[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, b;</span><br><span class="line"></span><br><span class="line">vis[v] = v_ind;</span><br><span class="line">low[v] = v_ind;</span><br><span class="line">v_ind++;</span><br><span class="line"><span class="keyword">for</span>(i = head[v]; i != <span class="number">-1</span>; i = e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">b = e[i].b;</span><br><span class="line"><span class="keyword">if</span>(vis[b] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">tarjan(b, v);</span><br><span class="line">low[v] = min(low[v], low[b]);</span><br><span class="line"><span class="keyword">if</span>(low[b] &gt; vis[v])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v &lt; b)</span><br><span class="line">&#123;</span><br><span class="line">bridge[bn].a = v;</span><br><span class="line">bridge[bn].b = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">bridge[bn].a = b;</span><br><span class="line">bridge[bn].b = v;</span><br><span class="line">&#125;</span><br><span class="line">bn++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b != pre)</span><br><span class="line">&#123;</span><br><span class="line">low[v] = min(low[v], vis[b]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, k, b;</span><br><span class="line"><span class="keyword">int</span> i, j, en;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">en = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d (%d)"</span>, &amp;a, &amp;k);</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);</span><br><span class="line">e[en].b = b;</span><br><span class="line">e[en].next = head[a];</span><br><span class="line">head[a] = en;</span><br><span class="line">en++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">bn = <span class="number">0</span>;</span><br><span class="line">v_ind = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">tarjan(i, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::sort(bridge, bridge + bn, cmp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d critical links\n"</span>, bn);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; bn; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d - %d\n"</span>, bridge[i].a, bridge[i].b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;&lt;a href=&quot;https://onlinejudge.org/index.php?option=com_onli
      
    
    </summary>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="tarjan算法" scheme="http://nchuacm.github.io/tags/tarjan%E7%AE%97%E6%B3%95/"/>
    
      <category term="连通图" scheme="http://nchuacm.github.io/tags/%E8%BF%9E%E9%80%9A%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>UVA-315 Network</title>
    <link href="http://nchuacm.github.io/acm/uva_315/"/>
    <id>http://nchuacm.github.io/acm/uva_315/</id>
    <published>2020-08-06T06:34:00.000Z</published>
    <updated>2021-12-24T08:55:35.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>&emsp;&emsp;<a href="https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=251" target="_blank" rel="noopener">https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=251</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>&emsp;&emsp;给出一张无向图，求图中割点的个数。割点是指删除该点后，其他点之间的连通性会受到影响的点。</p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>&emsp;&emsp;用tarjan算法来解决，这题的输入有点麻烦，因为输入的问题runtime error了好几次。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* https://cn.vjudge.net/contest/67418#problem/B */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(a, b) (a &lt; b) ? a : b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">100</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> mp[MAX_N][MAX_N];</span><br><span class="line"><span class="keyword">int</span> vis[MAX_N], vis_n;</span><br><span class="line"><span class="keyword">int</span> low[MAX_N];</span><br><span class="line"><span class="keyword">int</span> is_ctp[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, child = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">vis[v] = vis_n;</span><br><span class="line">low[v] = vis_n;</span><br><span class="line">vis_n++;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[v][i] != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">tarjan(i, root);</span><br><span class="line">low[v] = min(low[v], low[i]);</span><br><span class="line"><span class="keyword">if</span>(v == root)</span><br><span class="line">&#123;</span><br><span class="line">child++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(low[i] &gt;= vis[v])</span><br><span class="line">&#123;</span><br><span class="line">is_ctp[v] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">low[v] = min(low[v], vis[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(v == root &amp;&amp; child &gt;= <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">is_ctp[root] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, a, b, ans;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF &amp;&amp; n != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(mp, <span class="number">0</span>, <span class="keyword">sizeof</span>(mp));</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a) != EOF &amp;&amp; a != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(getchar() != <span class="string">'\n'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);</span><br><span class="line">mp[a][b] = <span class="number">1</span>;</span><br><span class="line">mp[b][a] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">-1</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(is_ctp, <span class="number">0</span>, <span class="keyword">sizeof</span>(is_ctp));</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">vis_n = <span class="number">1</span>;</span><br><span class="line">tarjan(i, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(is_ctp[i] == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;&lt;a href=&quot;https://onlinejudge.org/index.php?option=com_onli
      
    
    </summary>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="tarjan算法" scheme="http://nchuacm.github.io/tags/tarjan%E7%AE%97%E6%B3%95/"/>
    
      <category term="连通图" scheme="http://nchuacm.github.io/tags/%E8%BF%9E%E9%80%9A%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>POJ_1236 Network of Schools</title>
    <link href="http://nchuacm.github.io/acm/poj_1236/"/>
    <id>http://nchuacm.github.io/acm/poj_1236/</id>
    <published>2020-07-08T03:40:00.000Z</published>
    <updated>2021-12-24T08:55:52.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>&emsp;&emsp;<a href="http://poj.org/problem?id=1236" target="_blank" rel="noopener">http://poj.org/problem?id=1236</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>&emsp;&emsp;有N个学校用一些单向的网络连接一起，每个学校得到一套软件后，可以通过单向网络向周边的学校传输。<br>&emsp;&emsp;问题1：初始至少需要向多少个学校发放软件，使得网络内所有的学校最终都能得到软件。<br>&emsp;&emsp;问题2：至少需要添加几条传输线路，使任意向一个学校发放软件后，经过若干次传送，网络内所有的学校最终都能得到软件。</p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>&emsp;&emsp;将学校当做点，网络线路当做边，得到一个有向图，算出这个图里所有的强连通分量。因为同一个强连通分量之间的任意两点可以互相连通，所以向一个点发送软件后，与这个点同属于一个强连通分量的点都能收到软件。可以将每个强连通分量都假设为一个点，然后算出所有强连通分量的入度和出度，假设入度为0的强连通分量的个数为d_in0，出度为0的强连通分量的个数为d_out0。问题1的答案等于d_in0；当强连通分量的个数为1时，问题2的答案等于0，当强连通分量的个数大于1时，问题2的答案等于max(d_in0, d_out0)。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* AC 0MS 356K */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">100</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> mp[MAX_N][MAX_N];</span><br><span class="line"><span class="keyword">int</span> vis[MAX_N], <span class="keyword">vis_t</span>;</span><br><span class="line"><span class="keyword">int</span> st[MAX_N], st_top;</span><br><span class="line"><span class="keyword">int</span> in_st[MAX_N];</span><br><span class="line"><span class="keyword">int</span> low[MAX_N];</span><br><span class="line"><span class="keyword">int</span> belong[MAX_N], ccn;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, k;</span><br><span class="line"></span><br><span class="line">vis[v] = <span class="keyword">vis_t</span>;</span><br><span class="line">low[v] = <span class="keyword">vis_t</span>;</span><br><span class="line"><span class="keyword">vis_t</span>++;</span><br><span class="line">st_top++;</span><br><span class="line">st[st_top] = v;</span><br><span class="line">in_st[v] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[v][i] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(vis[i] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">tarjan(i);</span><br><span class="line"><span class="keyword">if</span>(low[v] &gt; low[i])</span><br><span class="line">&#123;</span><br><span class="line">low[v] = low[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(in_st[i] == <span class="number">1</span> &amp;&amp; low[v] &gt; vis[i])</span><br><span class="line">&#123;</span><br><span class="line">low[v] = vis[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low[v] == vis[v])</span><br><span class="line">&#123;</span><br><span class="line">k = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(k != v)</span><br><span class="line">&#123;</span><br><span class="line">k = st[st_top];</span><br><span class="line">st_top--;</span><br><span class="line">in_st[k] = <span class="number">0</span>;</span><br><span class="line">belong[k] = ccn;</span><br><span class="line">&#125;</span><br><span class="line">ccn++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k;</span><br><span class="line"><span class="keyword">int</span> d_in0, d_out0;</span><br><span class="line"><span class="keyword">int</span> d_in[MAX_N], d_out[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="built_in">memset</span>(mp, <span class="number">0</span>, <span class="keyword">sizeof</span>(mp));</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k) != EOF &amp;&amp; k !=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">mp[i][k - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 计算强连通分量 */</span></span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(in_st, <span class="number">0</span>, <span class="keyword">sizeof</span>(in_st));</span><br><span class="line">ccn = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">st_top = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">vis_t</span> = <span class="number">1</span>;</span><br><span class="line">tarjan(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 计算每个强连通分量的入度和出度 */</span></span><br><span class="line"><span class="built_in">memset</span>(d_in, <span class="number">0</span>, <span class="keyword">sizeof</span>(d_in));</span><br><span class="line"><span class="built_in">memset</span>(d_out, <span class="number">0</span>, <span class="keyword">sizeof</span>(d_out));</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[i][j] == <span class="number">1</span> &amp;&amp; belong[i] != belong[j])</span><br><span class="line">&#123;</span><br><span class="line">d_in[belong[j]]++;</span><br><span class="line">d_out[belong[i]]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">d_in0 = <span class="number">0</span>;</span><br><span class="line">d_out0 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; ccn; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d_in[i] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">d_in0++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(d_out[i] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">d_out0++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ccn == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1\n0\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n%d\n"</span>, d_in0, (d_in0 &gt; d_out0) ? d_in0 : d_out0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;&lt;a href=&quot;http://poj.org/problem?id=1236&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="poj" scheme="http://nchuacm.github.io/tags/poj/"/>
    
      <category term="强连通分量" scheme="http://nchuacm.github.io/tags/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>HDU_4081 Qin Shi Huangs National Road System</title>
    <link href="http://nchuacm.github.io/acm/hdu_4081/"/>
    <id>http://nchuacm.github.io/acm/hdu_4081/</id>
    <published>2020-06-19T11:00:07.000Z</published>
    <updated>2021-12-24T08:56:09.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>&emsp;&emsp;<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4081" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=4081</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>&emsp;&emsp;During the Warring States Period of ancient China(476 BC to 221 BC), there were seven kingdoms in China —- they were Qi, Chu, Yan, Han, Zhao, Wei and Qin. Ying Zheng was the king of the kingdom Qin. Through 9 years of wars, he finally conquered all six other kingdoms and became the first emperor of a unified China in 221 BC. That was Qin dynasty —- the first imperial dynasty of China(not to be confused with the Qing Dynasty, the last dynasty of China). So Ying Zheng named himself “Qin Shi Huang” because “Shi Huang” means “the first emperor” in Chinese.<br>&emsp;&emsp;Qin Shi Huang undertook gigantic projects, including the first version of the Great Wall of China, the now famous city-sized mausoleum guarded by a life-sized Terracotta Army, and a massive national road system. There is a story about the road system:<br>&emsp;&emsp;There were n cities in China and Qin Shi Huang wanted them all be connected by n-1 roads, in order that he could go to every city from the capital city Xianyang.<br>&emsp;&emsp;Although Qin Shi Huang was a tyrant, he wanted the total length of all roads to be minimum,so that the road system may not cost too many people’s life. A daoshi (some kind of monk) named Xu Fu told Qin Shi Huang that he could build a road by magic and that magic road would cost no money and no labor. But Xu Fu could only build ONE magic road for Qin Shi Huang. So Qin Shi Huang had to decide where to build the magic road. Qin Shi Huang wanted the total length of all none magic roads to be as small as possible, but Xu Fu wanted the magic road to benefit as many people as possible —- So Qin Shi Huang decided that the value of A/B (the ratio of A to B) must be the maximum, which A is the total population of the two cites connected by the magic road, and B is the total length of none magic roads.<br>&emsp;&emsp;Would you help Qin Shi Huang?<br>&emsp;&emsp;A city can be considered as a point, and a road can be considered as a line segment connecting two points.</p></blockquote><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><blockquote><p>&emsp;&emsp;The first line contains an integer t meaning that there are t test cases(t &lt;= 10).<br>&emsp;&emsp;For each test case:<br>&emsp;&emsp;The first line is an integer n meaning that there are n cities(2 &lt; n &lt;= 1000).<br>&emsp;&emsp;Then n lines follow. Each line contains three integers X, Y and P ( 0 &lt;= X, Y &lt;= 1000, 0 &lt; P &lt; 100000). (X, Y) is the coordinate of a city and P is the population of that city.<br>&emsp;&emsp;It is guaranteed that each city has a distinct location.</p></blockquote><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><blockquote><p>&emsp;&emsp;For each test case, print a line indicating the above mentioned maximum ratio A/B. The result should be rounded to 2 digits after decimal point.</p></blockquote><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><blockquote><p>2<br>4<br>1 1 20<br>1 2 30<br>200 2 80<br>200 1 100<br>3<br>1 1 20<br>1 2 30<br>2 2 40</p></blockquote><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><blockquote><p>65.00<br>70.00</p></blockquote><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>&emsp;&emsp;有n个城市，给出每个城市的坐标和人口数，秦始皇想修一些路，使得这n个城市之间可以互相连通，同时希望花费最少的劳动力（修的路的长度总和越大，花费的劳动力越多）。有一个叫徐福的道士可以用魔法帮秦始皇修一条路，并且不需要额外的劳动力，不过徐福希望他用魔法修的路能帮到更多的人。所以他们最终决定采集A/B最小的方案，A是通过魔道连接的两个城市的总人口，而B是不用魔法修的路的总长度。求A/B的最小值。</p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>&emsp;&emsp;次小生成树的变形。先求出最小生成树的总长度mst_l和maxd数组，然后枚举图上的每一条边，作为用魔法修的路，那么不用魔法修的路的总长度为mst_l-maxd[i][j]，再根据两个城市的总人口，就可以算出A/B的最小值。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* http://acm.hdu.edu.cn/showproblem.php?pid=4081 */</span></span><br><span class="line"><span class="comment">/* AC 109MS 16968K */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">1000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y, p;</span><br><span class="line">&#125; node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">node nd[MAX_N];</span><br><span class="line"><span class="keyword">int</span> mst[MAX_N];</span><br><span class="line"><span class="keyword">double</span> mp[MAX_N][MAX_N];</span><br><span class="line"><span class="keyword">double</span> maxd[MAX_N][MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k;</span><br><span class="line"><span class="keyword">double</span> min, mst_l;</span><br><span class="line"><span class="keyword">double</span> dist[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">dist[i] = mp[<span class="number">0</span>][i];</span><br><span class="line">mst[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">dist[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">memset</span>(maxd, <span class="number">0</span>, <span class="keyword">sizeof</span>(maxd));</span><br><span class="line"></span><br><span class="line">mst_l = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">min = <span class="number">1e10</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dist[j] != <span class="number">-1</span> &amp;&amp; min &gt; dist[j])</span><br><span class="line">&#123;</span><br><span class="line">min = dist[j];</span><br><span class="line">k = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(min == <span class="number">1e10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">mst_l += min;</span><br><span class="line">dist[k] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dist[j] == <span class="number">-1</span> &amp;&amp; j != k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> pre = mst[k];</span><br><span class="line">maxd[j][k] = (maxd[j][pre] &gt; mp[pre][k]) ? maxd[j][pre] : mp[pre][k];</span><br><span class="line">maxd[k][j] = maxd[j][k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dist[j] != <span class="number">-1</span> &amp;&amp; dist[j] &gt; mp[k][j])</span><br><span class="line">&#123;</span><br><span class="line">dist[j] = mp[k][j];</span><br><span class="line">mst[j] = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mst_l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">double</span> mst_l, mst_sl, temp, ans;</span><br><span class="line"></span><br><span class="line">mst_l = prim();</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i == j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = mst_l - maxd[i][j];</span><br><span class="line"><span class="keyword">if</span>(ans &lt; (nd[i].p + nd[j].p) / temp)</span><br><span class="line">&#123;</span><br><span class="line">ans = (nd[i].p + nd[j].p) / temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t, i, j;</span><br><span class="line"><span class="keyword">double</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;nd[i].x, &amp;nd[i].y, &amp;nd[i].p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line">mp[i][j] = <span class="built_in">pow</span>(nd[i].x - nd[j].x, <span class="number">2</span>) + <span class="built_in">pow</span>(nd[i].y - nd[j].y, <span class="number">2</span>);</span><br><span class="line">mp[i][j] = <span class="built_in">sqrt</span>(mp[i][j]);</span><br><span class="line">mp[j][i] = mp[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = solve();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=4081&quot; t
      
    
    </summary>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="hdu" scheme="http://nchuacm.github.io/tags/hdu/"/>
    
      <category term="次小生成树" scheme="http://nchuacm.github.io/tags/%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>POJ_1679 The Unique MST</title>
    <link href="http://nchuacm.github.io/acm/poj_1679/"/>
    <id>http://nchuacm.github.io/acm/poj_1679/</id>
    <published>2020-06-13T02:25:00.000Z</published>
    <updated>2021-12-24T08:55:50.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>&emsp;&emsp;<a href="http://poj.org/problem?id=1679" target="_blank" rel="noopener">http://poj.org/problem?id=1679</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>&emsp;&emsp;给出一张无向图，问图的最小生成数是否唯一，不唯一的话输出<code>Not Unique!</code>，否则输出最小生成树的边权和。</p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>&emsp;&emsp;算出图的最小生成树，然后算出次小生成数，判断一下是否相等。（第一次写次小生成树，bug改了好久(T﹏T)！）</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* http://poj.org/problem?id=1679 */</span></span><br><span class="line"><span class="comment">/* AC 0MS 412K */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x1f1f1f1f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> mp[MAX_N][MAX_N];</span><br><span class="line"><span class="keyword">int</span> mst[MAX_N];</span><br><span class="line"><span class="keyword">int</span> maxd[MAX_N][MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k, min, ans;</span><br><span class="line"><span class="keyword">int</span> dist[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">dist[i] = mp[<span class="number">1</span>][i];</span><br><span class="line">mst[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">dist[<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">min = INF;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">2</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dist[j] != <span class="number">-1</span> &amp;&amp; min &gt; dist[j])</span><br><span class="line">&#123;</span><br><span class="line">min = dist[j];</span><br><span class="line">k = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(min == INF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans += dist[k];</span><br><span class="line">dist[k] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dist[j] != <span class="number">-1</span> &amp;&amp; dist[j] &gt; mp[k][j])</span><br><span class="line">&#123;</span><br><span class="line">dist[j] = mp[k][j];</span><br><span class="line">mst[j] = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dist[j] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> pre = mst[k];</span><br><span class="line">maxd[j][k] = (maxd[j][pre] &gt; mp[pre][k]) ? maxd[j][pre] : mp[pre][k];</span><br><span class="line">maxd[k][j] = maxd[j][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sec_mst</span><span class="params">(<span class="keyword">int</span> mst_l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, ans;</span><br><span class="line"></span><br><span class="line">ans = INF;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i == j || mp[i][j] == INF || mst[i] == j || mst[j] == i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans &gt; mst_l + mp[i][j] - maxd[i][j])</span><br><span class="line">&#123;</span><br><span class="line">ans = mst_l + mp[i][j] - maxd[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans == INF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t, i, x, y, w, mst_l;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="built_in">memset</span>(mp, <span class="number">0x1f</span>, <span class="keyword">sizeof</span>(mp));</span><br><span class="line"><span class="built_in">memset</span>(maxd, <span class="number">0</span>, <span class="keyword">sizeof</span>(maxd));</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">mp[i][i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;x, &amp;y, &amp;w);</span><br><span class="line"><span class="keyword">if</span>(mp[x][y] &gt; w)</span><br><span class="line">&#123;</span><br><span class="line">mp[x][y] = w;</span><br><span class="line">mp[y][x] = w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mst_l = prim();</span><br><span class="line"><span class="keyword">if</span>(mst_l &lt; <span class="number">0</span> || mst_l == sec_mst(mst_l))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Not Unique!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, mst_l);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;&lt;a href=&quot;http://poj.org/problem?id=1679&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="次小生成树" scheme="http://nchuacm.github.io/tags/%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="poj" scheme="http://nchuacm.github.io/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>HDU-1754 I Hate It</title>
    <link href="http://nchuacm.github.io/acm/hdu-1754/"/>
    <id>http://nchuacm.github.io/acm/hdu-1754/</id>
    <published>2020-04-13T07:56:34.000Z</published>
    <updated>2021-12-24T08:56:04.472Z</updated>
    
    <content type="html"><![CDATA[<p>线段树模板题，求区间最大值</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>&emsp;&emsp;<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1754" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1754</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>&emsp;&emsp;中文题，不解释</p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>&emsp;&emsp;跟上一题一样，还是线段树的模板题，只不过把求区间和改成了求区间最大值。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* http://acm.hdu.edu.cn/showproblem.php?pid=1754 */</span></span><br><span class="line"><span class="comment">/* AC 702MS 4060K */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">200000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num[MAX_N];</span><br><span class="line"><span class="keyword">int</span> seg_tree[<span class="number">4</span> * MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, mid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(left == right - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">seg_tree[root] = num[left];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">a = build(root * <span class="number">2</span>, left, mid);</span><br><span class="line">b = build(root * <span class="number">2</span> + <span class="number">1</span>, mid, right);</span><br><span class="line">seg_tree[root] = (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> seg_tree[root];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> index, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, mid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(left == right - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">seg_tree[root] = val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mid = (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(index &lt; mid)</span><br><span class="line">&#123;</span><br><span class="line">seg_tree[root * <span class="number">2</span>] = update(root * <span class="number">2</span>, left, mid, index, val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">seg_tree[root * <span class="number">2</span> + <span class="number">1</span>] = update(root * <span class="number">2</span> + <span class="number">1</span>, mid, right, index, val);</span><br><span class="line">&#125;</span><br><span class="line">a = seg_tree[root * <span class="number">2</span>];</span><br><span class="line">b = seg_tree[root * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">seg_tree[root] = (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> seg_tree[root];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, mid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(qr &lt;= left || right &lt;= ql)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ql &lt;= left &amp;&amp; right &lt;= qr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> seg_tree[root];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">a = query(root * <span class="number">2</span>, left, mid, ql, qr);</span><br><span class="line">b = query(root * <span class="number">2</span> + <span class="number">1</span>, mid, right, ql, qr);</span><br><span class="line"><span class="keyword">return</span> (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, x, y;</span><br><span class="line"><span class="keyword">int</span> i, ans;</span><br><span class="line"><span class="keyword">char</span> req;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</span><br><span class="line">&#125;</span><br><span class="line">build(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line">getchar();</span><br><span class="line">req = getchar();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y);</span><br><span class="line">x -= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(req == <span class="string">'Q'</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans = query(<span class="number">1</span>, <span class="number">0</span>, n, x, y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(req == <span class="string">'U'</span>)</span><br><span class="line">&#123;</span><br><span class="line">update(<span class="number">1</span>, <span class="number">0</span>, n, x, y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;线段树模板题，求区间最大值&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="hdu" scheme="http://nchuacm.github.io/tags/hdu/"/>
    
      <category term="线段树" scheme="http://nchuacm.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>HDU-1166 敌兵布阵</title>
    <link href="http://nchuacm.github.io/acm/hdu-1166/"/>
    <id>http://nchuacm.github.io/acm/hdu-1166/</id>
    <published>2020-04-13T04:02:13.000Z</published>
    <updated>2021-12-24T08:56:06.020Z</updated>
    
    <content type="html"><![CDATA[<p>线段树模板题，求区间和</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>&emsp;&emsp;<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1166" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1166</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>&emsp;&emsp;又是一道可以偷懒的中文题，开心！</p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>&emsp;&emsp;这是一道线段树的模板题，而且不加延迟标记也能AC。这题也可以用树状数组来做。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* http://acm.hdu.edu.cn/showproblem.php?pid=1166 */</span></span><br><span class="line"><span class="comment">/* AC 249MS 1928K */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">50000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num[MAX_N];</span><br><span class="line"><span class="keyword">int</span> seg_tree[<span class="number">4</span> * MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, mid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(left == right - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">seg_tree[root] = num[left];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">a = build(root * <span class="number">2</span>, left, mid);</span><br><span class="line">b = build(root * <span class="number">2</span> + <span class="number">1</span>, mid, right);</span><br><span class="line">seg_tree[root] = a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> seg_tree[root];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> index, <span class="keyword">int</span> add)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(left == right - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">seg_tree[root] += add;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mid = (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(index &lt; mid)</span><br><span class="line">&#123;</span><br><span class="line">seg_tree[root * <span class="number">2</span>] = update(root * <span class="number">2</span>, left, mid, index, add);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">seg_tree[root * <span class="number">2</span> + <span class="number">1</span>] = update(root * <span class="number">2</span> + <span class="number">1</span>, mid, right, index, add);</span><br><span class="line">&#125;</span><br><span class="line">seg_tree[root] = seg_tree[root * <span class="number">2</span>] + seg_tree[root * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> seg_tree[root];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, mid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(qr &lt;= left || right &lt;= ql)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ql &lt;= left &amp;&amp; right &lt;= qr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> seg_tree[root];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">a = query(root * <span class="number">2</span>, left, mid, ql, qr);</span><br><span class="line">b = query(root * <span class="number">2</span> + <span class="number">1</span>, mid, right, ql, qr);</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cas, t, n, x, y;</span><br><span class="line"><span class="keyword">int</span> i, ans;</span><br><span class="line"><span class="keyword">char</span> req[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line"><span class="keyword">for</span>(cas = <span class="number">1</span>; cas &lt;= t; cas++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</span><br><span class="line">&#125;</span><br><span class="line">build(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>, cas);</span><br><span class="line"><span class="keyword">while</span>(getchar(), <span class="built_in">scanf</span>(<span class="string">"%s"</span>, req) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(req[<span class="number">0</span>] == <span class="string">'E'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y);</span><br><span class="line">x -= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(req[<span class="number">0</span>] == <span class="string">'Q'</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans = query(<span class="number">1</span>, <span class="number">0</span>, n, x, y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(req[<span class="number">0</span>] == <span class="string">'A'</span>)</span><br><span class="line">&#123;</span><br><span class="line">update(<span class="number">1</span>, <span class="number">0</span>, n, x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(req[<span class="number">0</span>] == <span class="string">'S'</span>)</span><br><span class="line">&#123;</span><br><span class="line">update(<span class="number">1</span>, <span class="number">0</span>, n, x, -y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;线段树模板题，求区间和&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="hdu" scheme="http://nchuacm.github.io/tags/hdu/"/>
    
      <category term="线段树" scheme="http://nchuacm.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>POJ-1287 Networking</title>
    <link href="http://nchuacm.github.io/acm/poj-1287/"/>
    <id>http://nchuacm.github.io/acm/poj-1287/</id>
    <published>2020-04-10T00:57:52.000Z</published>
    <updated>2021-12-24T08:55:44.336Z</updated>
    
    <content type="html"><![CDATA[<p>最小生成树问题</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>&emsp;&emsp;<a href="http://poj.org/problem?id=1287" target="_blank" rel="noopener">http://poj.org/problem?id=1287</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>&emsp;&emsp;给出P个节点和R条边的无向图，求最小生成树。</p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>&emsp;&emsp;最小生成树的模板题，可以用Prim算法或者Kruskal算法求解，Prim算法适合稠密图（点少边多），Kruskal算法适合稀疏图（点多边少）。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>Prim算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* http://poj.org/problem?id=1287 */</span></span><br><span class="line"><span class="comment">/* AC 16MS 380K */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">50</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">(<span class="keyword">int</span> mp[][MAX_N], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k, min, ans;</span><br><span class="line"><span class="keyword">int</span> book[MAX_N];</span><br><span class="line"><span class="keyword">int</span> tree[MAX_N];</span><br><span class="line"><span class="keyword">int</span> dist[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">book[i] = <span class="number">0</span>;</span><br><span class="line">tree[i] = <span class="number">0</span>;</span><br><span class="line">dist[i] = mp[<span class="number">0</span>][i];</span><br><span class="line">&#125;</span><br><span class="line">book[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">tree[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">min = <span class="number">0x1f1f1f1f</span>;</span><br><span class="line">k = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(book[j] == <span class="number">0</span> &amp;&amp; min &gt; dist[j])</span><br><span class="line">&#123;</span><br><span class="line">k = j;</span><br><span class="line">min = dist[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">book[k] = <span class="number">1</span>;</span><br><span class="line">ans += mp[tree[k]][k];</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(book[j] == <span class="number">0</span> &amp;&amp; mp[k][j] &lt; dist[j])</span><br><span class="line">&#123;</span><br><span class="line">dist[j] = mp[k][j];</span><br><span class="line">tree[j] = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> i, a, b, w, ans;</span><br><span class="line"><span class="keyword">int</span> mp[MAX_N][MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF &amp;&amp; n &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line"><span class="built_in">memset</span>(mp, <span class="number">0x1f</span>, <span class="keyword">sizeof</span>(mp));</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a, &amp;b, &amp;w);</span><br><span class="line">a -= <span class="number">1</span>;</span><br><span class="line">b -= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(w &lt; mp[a][b])</span><br><span class="line">&#123;</span><br><span class="line">mp[a][b] = w;</span><br><span class="line">mp[b][a] = w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ans = prim(mp, n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kruskal算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* http://poj.org/problem?id=1287 */</span></span><br><span class="line"><span class="comment">/* AC 16MS 400K */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">50</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a, b, w;</span><br><span class="line">&#125; edge;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> <span class="built_in">set</span>[], <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">set</span>[i] != i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">set</span>[i] = find_root(<span class="built_in">set</span>, <span class="built_in">set</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">set</span>[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(edge e[], <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, k, ar, br;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">set</span>[MAX_N];</span><br><span class="line"></span><br><span class="line">sort(e, e + m, cmp);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; MAX_N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">set</span>[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m &amp;&amp; k &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">ar = find_root(<span class="built_in">set</span>, e[i].a);</span><br><span class="line">br = find_root(<span class="built_in">set</span>, e[i].b);</span><br><span class="line"><span class="keyword">if</span>(ar != br)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">set</span>[ar] = br;</span><br><span class="line">ans += e[i].w;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k &lt; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">edge e[MAX_N * MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, a, b, w, ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF &amp;&amp; n &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a, &amp;b, &amp;w);</span><br><span class="line">e[i] = (edge)&#123;a, b, w&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ans = kruskal(e, n, m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最小生成树问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="poj" scheme="http://nchuacm.github.io/tags/poj/"/>
    
      <category term="最小生成树" scheme="http://nchuacm.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>POJ-1251 Jungle Roads</title>
    <link href="http://nchuacm.github.io/acm/poj-1251/"/>
    <id>http://nchuacm.github.io/acm/poj-1251/</id>
    <published>2020-04-08T08:47:21.000Z</published>
    <updated>2021-12-24T08:55:46.956Z</updated>
    
    <content type="html"><![CDATA[<p>最小生成树问题-Kruskal算法</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>&emsp;&emsp;<a href="http://poj.org/problem?id=1251" target="_blank" rel="noopener">http://poj.org/problem?id=1251</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>&emsp;&emsp;给出地图上的n个村庄，村庄之间存在一些双向路径，每条路径有一个权值。需要选出一些路径，使得所有的村庄之间可以相互连通，且选出路径的权值和要最小，求出最小的权值和。</p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>&emsp;&emsp;最小生成树的模板题，可以用Prim算法或者Kruskal算法求解，这里用的是Kruskal算法。<br>&emsp;&emsp;有个奇怪的问题，用c语言的<code>scanf()</code>来输入字符的话会Runtime Error，用c++的cin就没问题。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* http://poj.org/problem?id=1251 */</span></span><br><span class="line"><span class="comment">/* AC 0MS 716K */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a, b, w;</span><br><span class="line">&#125; edge;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> <span class="built_in">set</span>[], <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">set</span>[i] != i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">set</span>[i] = find_root(<span class="built_in">set</span>, <span class="built_in">set</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">set</span>[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(edge e[], <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, k, ar, br;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">set</span>[MAX_N];</span><br><span class="line"></span><br><span class="line">sort(e, e + m, cmp);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; MAX_N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">set</span>[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m &amp;&amp; k &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">ar = find_root(<span class="built_in">set</span>, e[i].a);</span><br><span class="line">br = find_root(<span class="built_in">set</span>, e[i].b);</span><br><span class="line"><span class="keyword">if</span>(ar != br)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">set</span>[ar] = br;</span><br><span class="line">ans += e[i].w;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k &lt; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> i, j, k, w, ans;</span><br><span class="line"><span class="keyword">char</span> a, b;</span><br><span class="line">edge e[MAX_N * MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// while(scanf("%d", &amp;n) != EOF &amp;&amp; n &gt; 0)</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// getchar();</span></span><br><span class="line"><span class="comment">// scanf("%c %d", &amp;a, &amp;k);</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// getchar();</span></span><br><span class="line"><span class="comment">// scanf("%c %d", &amp;b, &amp;w);</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; b &gt;&gt; w;</span><br><span class="line">e[m] = (edge)&#123;a - <span class="string">'A'</span>, b - <span class="string">'A'</span>, w&#125;;</span><br><span class="line">m++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ans = kruskal(e, n, m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">9</span></span><br><span class="line"><span class="comment">A 2 B 12 I 25</span></span><br><span class="line"><span class="comment">B 3 C 10 H 40 I 8</span></span><br><span class="line"><span class="comment">C 2 D 18 G 55</span></span><br><span class="line"><span class="comment">D 1 E 44</span></span><br><span class="line"><span class="comment">E 2 F 60 G 38</span></span><br><span class="line"><span class="comment">F 0</span></span><br><span class="line"><span class="comment">G 1 H 35</span></span><br><span class="line"><span class="comment">H 1 I 35</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">A 2 B 10 C 40</span></span><br><span class="line"><span class="comment">B 1 C 20</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最小生成树问题-Kruskal算法&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="poj" scheme="http://nchuacm.github.io/tags/poj/"/>
    
      <category term="最小生成树" scheme="http://nchuacm.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>POJ-1611 The Suspects</title>
    <link href="http://nchuacm.github.io/acm/poj-1611/"/>
    <id>http://nchuacm.github.io/acm/poj-1611/</id>
    <published>2020-04-07T10:06:14.000Z</published>
    <updated>2021-12-24T08:55:42.128Z</updated>
    
    <content type="html"><![CDATA[<p>简单的并查集</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>&emsp;&emsp;<a href="http://poj.org/problem?id=1611" target="_blank" rel="noopener">http://poj.org/problem?id=1611</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>&emsp;&emsp;有n个学生和m个团队，学生编号为0～n，一个学生可以属于多个团体。团体内如果有一个学生被怀疑感染了病毒，那么团体内所有学生都会被怀疑感染了病毒，初始时假设只有0号学生被怀疑感染了病毒，问一共有多少人会被怀疑感染了病毒。</p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>&emsp;&emsp;可以用并查集来解决，首先0号学生属于0号集合，对于每个团体，找到所有成员所在的集合编号，如果有一个成员属于0号集合，则把所有成员都合并到0号集合，如果没有成员属于0号集合，则将所有成员所属的集合合并成一个集合，集合编号任意。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* http://poj.org/problem?id=1611 */</span></span><br><span class="line"><span class="comment">/* AC 16MS 464K */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">30000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_M = <span class="number">500</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> <span class="built_in">set</span>[], <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">set</span>[i] != i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">set</span>[i] = find_root(<span class="built_in">set</span>, <span class="built_in">set</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">set</span>[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> i, j, k, num, ar, br, ans;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">set</span>[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m) != EOF &amp;&amp; (n != <span class="number">0</span> || m != <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">set</span>[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line"><span class="keyword">if</span>(k != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">ar = find_root(<span class="built_in">set</span>, num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; k; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">br = find_root(<span class="built_in">set</span>, num);</span><br><span class="line"><span class="keyword">if</span>(br == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">set</span>[ar] = br;</span><br><span class="line">ar = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">set</span>[br] = ar;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">ar = find_root(<span class="built_in">set</span>, i);</span><br><span class="line"><span class="keyword">if</span>(ar == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单的并查集&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="poj" scheme="http://nchuacm.github.io/tags/poj/"/>
    
      <category term="并查集" scheme="http://nchuacm.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>POJ-2236 Wireless Network</title>
    <link href="http://nchuacm.github.io/acm/poj-2236/"/>
    <id>http://nchuacm.github.io/acm/poj-2236/</id>
    <published>2020-04-03T02:31:09.000Z</published>
    <updated>2021-12-24T08:55:22.067Z</updated>
    
    <content type="html"><![CDATA[<p>简单的并查集</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>&emsp;&emsp;<a href="http://poj.org/problem?id=2236" target="_blank" rel="noopener">http://poj.org/problem?id=2236</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>&emsp;&emsp;网断了！要把网络修好，电脑是通过无线来通信的，通信范围是d。也就是如果两台电脑没坏，且之间的距离小于d，那这两台电脑就可以相互通信。<br>&emsp;&emsp;一共有n台电脑，初始时每台电脑都是坏的，首先给出每台电脑的坐标，然后每次可以进行两种操作：<br>&emsp;&emsp;&emsp;&emsp;1. ‘O’操作，修好一台电脑<br>&emsp;&emsp;&emsp;&emsp;2. ‘S’操作，测试两台电脑是否可以通信<br>&emsp;&emsp;输出所有的测试结果，如果可以通信输出“SUCCESS”，否则输出“FAIL”。</p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>&emsp;&emsp;简单的并查集问题，对于’O’操作，遍历所有已经修好的电脑，如果之间的距离小于d，就合并。对于’S’操作，判断两台电脑是否在一个集合里。<br>&emsp;&emsp;注意’O’和’S’的输入，会接收终端的换行符。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* http://poj.org/problem?id=2236 */</span></span><br><span class="line"><span class="comment">/* AC 3329MS 328K */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">1000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">distance</span><span class="params">(point p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>((x - p.x) * (x - p.x) + (y - p.y) * (y - p.y));</span><br><span class="line">&#125;</span><br><span class="line">&#125; point;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> <span class="built_in">set</span>[], <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">set</span>[i] != i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">set</span>[i] = find_root(<span class="built_in">set</span>, <span class="built_in">set</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">set</span>[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, d;</span><br><span class="line"><span class="keyword">char</span> opt;</span><br><span class="line"><span class="keyword">int</span> i, j, a, b, ar, br;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">set</span>[MAX_N], book[MAX_N];</span><br><span class="line">point p[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;d);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;p[i].x, &amp;p[i].y);</span><br><span class="line"><span class="built_in">set</span>[i] = i;</span><br><span class="line">book[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;opt) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(opt == <span class="string">'O'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">ar = find_root(<span class="built_in">set</span>, a);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(book[i] == <span class="number">1</span> &amp;&amp; p[i].distance(p[a]) &lt;= (<span class="keyword">double</span>)d)</span><br><span class="line">&#123;</span><br><span class="line">br = find_root(<span class="built_in">set</span>, i);</span><br><span class="line"><span class="built_in">set</span>[br] = ar;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">book[a] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(opt == <span class="string">'S'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="keyword">if</span>(book[a] == <span class="number">0</span> || book[b] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"FAIL\n"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">ar = find_root(<span class="built_in">set</span>, a);</span><br><span class="line">br = find_root(<span class="built_in">set</span>, b);</span><br><span class="line"><span class="keyword">if</span>(ar == br)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"SUCCESS\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"FAIL\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单的并查集&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="poj" scheme="http://nchuacm.github.io/tags/poj/"/>
    
      <category term="并查集" scheme="http://nchuacm.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>POJ-2253 Frogger</title>
    <link href="http://nchuacm.github.io/acm/poj-2253/"/>
    <id>http://nchuacm.github.io/acm/poj-2253/</id>
    <published>2020-04-02T09:06:58.000Z</published>
    <updated>2021-12-24T08:55:23.583Z</updated>
    
    <content type="html"><![CDATA[<p>单源最短路径变形-dijkstra算法</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>&emsp;&emsp;<a href="http://poj.org/problem?id=2253" target="_blank" rel="noopener">http://poj.org/problem?id=2253</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>&emsp;&emsp;湖上有n个石头，青蛙Freddy坐在1号石头上，青蛙Fiona坐在2号石头上，青蛙Freddy想要到Fiona的2号石头上（应该是只绅士青蛙）。但是湖水被污染了，他要尽量避免游泳，因此他需要利用其他石头来中转，与普通的路径长度定义不同，这里路径的长度定义为相邻两个石头距离的最大值。题目要求找出一条最短的路径，输出路径长度。</p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>&emsp;&emsp;解题方法与使用dijkstra算法解决普通单源最短路径问题类似，但是因为路径长度的定义不同，所以在初始化起点到其他节点的路径长度，和更新到其他点的最短路径的时候需要改一下。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* http://poj.org/problem?id=2253 */</span></span><br><span class="line"><span class="comment">/* AC 0MS 336K */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">200</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">distance</span><span class="params">(point p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>((x - p.x) * (x - p.x) + (y - p.y) * (y - p.y));</span><br><span class="line">&#125;</span><br><span class="line">&#125; point;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">point p[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k;</span><br><span class="line"><span class="keyword">double</span> min, max;</span><br><span class="line"><span class="keyword">int</span> book[MAX_N];</span><br><span class="line"><span class="keyword">double</span> dist[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">dist[i] = p[start].distance(p[i]);</span><br><span class="line">book[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">dist[start] = <span class="number">0.0</span>;</span><br><span class="line">book[start] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">min = <span class="number">1e10</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(book[j] == <span class="number">0</span> &amp;&amp; dist[j] &lt; min)</span><br><span class="line">&#123;</span><br><span class="line">min = dist[j];</span><br><span class="line">k = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k == end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> dist[k];</span><br><span class="line">&#125;</span><br><span class="line">book[k] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(book[j] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 计算起点经过k点到达j点的路径最大值 */</span></span><br><span class="line">max = p[k].distance(p[j]);</span><br><span class="line"><span class="keyword">if</span>(dist[k] &gt; max)</span><br><span class="line">&#123;</span><br><span class="line">max = dist[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dist[j] &gt; max)</span><br><span class="line">&#123;</span><br><span class="line">dist[j] = max;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, t;</span><br><span class="line"><span class="keyword">double</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(t = <span class="number">1</span>; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF &amp;&amp; n &gt;= <span class="number">2</span>; t++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;p[i].x, &amp;p[i].y);</span><br><span class="line">&#125;</span><br><span class="line">ans = dijkstra(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Scenario #%d\n"</span>, t);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Frog Distance = %.3f\n\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单源最短路径变形-dijkstra算法&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="poj" scheme="http://nchuacm.github.io/tags/poj/"/>
    
      <category term="最短路" scheme="http://nchuacm.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>POJ-2387 Til the Cows Come Home</title>
    <link href="http://nchuacm.github.io/acm/poj-2387/"/>
    <id>http://nchuacm.github.io/acm/poj-2387/</id>
    <published>2020-04-02T09:03:12.000Z</published>
    <updated>2021-12-24T08:55:24.591Z</updated>
    
    <content type="html"><![CDATA[<p>单源最短路问题-dijkstra算法</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>&emsp;&emsp;<a href="http://poj.org/problem?id=2387" target="_blank" rel="noopener">http://poj.org/problem?id=2387</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>&emsp;&emsp;给出一个有n个点的图已经某些点之间的路径，求第n个点到第1个点的最短路径。</p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>&emsp;&emsp;标准的单源最短路径问题，可以用dijkstra算法来解决，也可以用Bellman-Ford算法和SPFA算法(可以解决含负边权的图)求解，不过我不会。小心可能会有重边。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* http://poj.org/problem?id=2387 */</span></span><br><span class="line"><span class="comment">/* AC 47MS 4332K */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">1000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> mp[MAX_N][MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k, min;</span><br><span class="line"><span class="keyword">int</span> book[MAX_N];</span><br><span class="line"><span class="keyword">int</span> dist[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">dist[i] = mp[start][i];</span><br><span class="line">book[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">dist[start] = <span class="number">0</span>;</span><br><span class="line">book[start] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">min = <span class="number">0x1f1f1f1f</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(book[j] == <span class="number">0</span> &amp;&amp; dist[j] &lt; min)</span><br><span class="line">&#123;</span><br><span class="line">min = dist[j];</span><br><span class="line">k = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k == end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> dist[k];</span><br><span class="line">&#125;</span><br><span class="line">book[k] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(book[j] == <span class="number">0</span> &amp;&amp; dist[j] &gt; dist[k] + mp[k][j])</span><br><span class="line">&#123;</span><br><span class="line">dist[j] = dist[k] + mp[k][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t, a, b, w;</span><br><span class="line"><span class="keyword">int</span> i, ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;t, &amp;n) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(mp, <span class="number">0x1f</span>, <span class="keyword">sizeof</span>(mp));</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; t; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a, &amp;b, &amp;w);</span><br><span class="line">a -= <span class="number">1</span>;</span><br><span class="line">b -= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(w &lt; mp[a][b])</span><br><span class="line">&#123;</span><br><span class="line">mp[a][b] = w;</span><br><span class="line">mp[b][a] = w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = dijkstra(n - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单源最短路问题-dijkstra算法&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="poj" scheme="http://nchuacm.github.io/tags/poj/"/>
    
      <category term="最短路" scheme="http://nchuacm.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>HDU-3335 Divisibility</title>
    <link href="http://nchuacm.github.io/acm/hdu-3335/"/>
    <id>http://nchuacm.github.io/acm/hdu-3335/</id>
    <published>2020-04-02T09:01:49.000Z</published>
    <updated>2021-12-24T08:55:57.600Z</updated>
    
    <content type="html"><![CDATA[<p>舞蹈链重复覆盖问题</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>&emsp;&emsp;<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3335" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=3335</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>&emsp;&emsp;给出n个数，需要从里面选择一些出来，但是如果选择了某个数k的话，则能被k整除或k能整除的数都不能再选了，问最多能选择多少个数。</p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>&emsp;&emsp;这题原理不是太懂，参考网上大佬的解题方法AC的，方法如下：<br>&emsp;&emsp;首先建立一个n×n的整除关系矩阵，如果第i个数于第j个数有整除关系，则矩阵的第i行第j列为1，用这个矩阵来运行舞蹈链重复覆盖算法，取结果最大值作为答案。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* http://acm.hdu.edu.cn/showproblem.php?pid=3335 */</span></span><br><span class="line"><span class="comment">/* AC 15MS 1252K */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">1000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 舞蹈链算法，用于求重复覆盖问题 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dance_link_rep</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_ROWS = MAX_N;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_COLS = MAX_N;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> u, d, l, r;</span><br><span class="line"><span class="keyword">int</span> row, col;</span><br><span class="line">&#125; node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rows, cols, node_size;</span><br><span class="line">node nd[MAX_ROWS * MAX_COLS];</span><br><span class="line"><span class="keyword">int</span> row_head[MAX_ROWS], col_nds[MAX_COLS];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> rows, <span class="keyword">int</span> cols)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span> -&gt; rows = rows;</span><br><span class="line"><span class="keyword">this</span> -&gt; cols = cols;</span><br><span class="line"><span class="comment">/* 初始化每一列的头节点 */</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= cols; i++)</span><br><span class="line">&#123;</span><br><span class="line">nd[i].u = i;</span><br><span class="line">nd[i].d = i;</span><br><span class="line">nd[i].l = i - <span class="number">1</span>;</span><br><span class="line">nd[i].r = i + <span class="number">1</span>;</span><br><span class="line">col_nds[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">nd[<span class="number">0</span>].l = cols;</span><br><span class="line">nd[cols].r = <span class="number">0</span>;</span><br><span class="line">node_size = cols + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化每一行的行指针 */</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= rows; i++)</span><br><span class="line">&#123;</span><br><span class="line">row_head[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_node</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* nd[node_size]为新添加的节点 */</span></span><br><span class="line">nd[node_size].row = row;</span><br><span class="line">nd[node_size].col = col;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将新添加的节点与其所在的列连接 */</span></span><br><span class="line">nd[node_size].u = col;</span><br><span class="line">nd[node_size].d = nd[col].d;</span><br><span class="line">nd[nd[col].d].u = node_size;</span><br><span class="line">nd[col].d = node_size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将新添加的节点与其所在的行连接 */</span></span><br><span class="line"><span class="keyword">if</span>(row_head[row] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">row_head[row] = node_size;</span><br><span class="line">nd[node_size].l = node_size;</span><br><span class="line">nd[node_size].r = node_size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> row_first = row_head[row];</span><br><span class="line">nd[node_size].r = row_first;</span><br><span class="line">nd[node_size].l = nd[row_first].l;</span><br><span class="line">nd[nd[row_first].l].r = node_size;</span><br><span class="line">nd[row_first].l = node_size;</span><br><span class="line">&#125;</span><br><span class="line">col_nds[col]++;</span><br><span class="line">node_size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = nd[col].d; i != col; i = nd[i].d)</span><br><span class="line">&#123;</span><br><span class="line">nd[nd[i].r].l = nd[i].l;</span><br><span class="line">nd[nd[i].l].r = nd[i].r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resume</span><span class="params">(<span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = nd[col].u; i != col; i = nd[i].u)</span><br><span class="line">&#123;</span><br><span class="line">nd[nd[i].l].r = i;</span><br><span class="line">nd[nd[i].r].l = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_rows</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k, num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> v[MAX_COLS];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = nd[<span class="number">0</span>].r; i != <span class="number">0</span>; i = nd[i].r)</span><br><span class="line">&#123;</span><br><span class="line">v[i] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = nd[<span class="number">0</span>].r; i != <span class="number">0</span>; i = nd[i].r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v[i] == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">num++;</span><br><span class="line"><span class="keyword">for</span>(j = nd[i].d; j != i; j = nd[j].d)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(k = nd[j].r; k != j; k = nd[k].r)</span><br><span class="line">&#123;</span><br><span class="line">v[nd[k].col] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">int</span> res, select_col;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mr = get_rows();</span><br><span class="line"><span class="keyword">if</span>(ans != <span class="number">-1</span> &amp;&amp; len + mr &lt; ans)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 当前十字链表没有列 */</span></span><br><span class="line"><span class="keyword">if</span>(nd[<span class="number">0</span>].r == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ans &lt; len)</span><br><span class="line">&#123;</span><br><span class="line">ans = len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line">select_col = nd[<span class="number">0</span>].r;</span><br><span class="line"><span class="keyword">for</span>(i = nd[<span class="number">0</span>].r; i != <span class="number">0</span>; i = nd[i].r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(nd[i].d == i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(col_nds[select_col] &gt; col_nds[i])</span><br><span class="line">&#123;</span><br><span class="line">select_col = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = nd[select_col].d; i != select_col; i = nd[i].d)</span><br><span class="line">&#123;</span><br><span class="line">remove(i);</span><br><span class="line"><span class="keyword">for</span>(j = nd[i].r; j != i; j = nd[j].r)</span><br><span class="line">&#123;</span><br><span class="line">remove(j);</span><br><span class="line">&#125;</span><br><span class="line">dfs(len + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(j = nd[i].l; j != i; j = nd[j].l)</span><br><span class="line">&#123;</span><br><span class="line">resume(j);</span><br><span class="line">&#125;</span><br><span class="line">resume(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ans = <span class="number">-1</span>;</span><br><span class="line">dfs(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; dance_link_rep;</span><br><span class="line"></span><br><span class="line">dance_link_rep dl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t, n;</span><br><span class="line"><span class="keyword">int</span> i, j, ans;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dl.init(n, n);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] % a[j] == <span class="number">0</span> || a[j] % a[i] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">dl.add_node(i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = dl.solve();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;舞蹈链重复覆盖问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="hdu" scheme="http://nchuacm.github.io/tags/hdu/"/>
    
      <category term="舞蹈链" scheme="http://nchuacm.github.io/tags/%E8%88%9E%E8%B9%88%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>HDU-4069 Squiggly Sudoku</title>
    <link href="http://nchuacm.github.io/acm/hdu-4069/"/>
    <id>http://nchuacm.github.io/acm/hdu-4069/</id>
    <published>2020-03-31T07:26:52.000Z</published>
    <updated>2021-12-24T08:55:55.928Z</updated>
    
    <content type="html"><![CDATA[<p>变形的数独问题</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>&emsp;&emsp;<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4069" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=4069</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>&emsp;&emsp;普通的数独问题是要求每个3×3的子矩阵里不能有相同的数字，这题将3×3的子矩阵改成了题目给定的连通区域，每个连通区域的面积为9，其他要求不变。</p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>&emsp;&emsp;与用舞蹈链解决普通数独问题类似，求解前需要用深度优先搜索找出每个连通区域的范围，然后给每个连通区域编号，用这个编号去代替解决普通数独问题的3×3子矩阵的编号。<br>&emsp;&emsp;这题比较麻烦的是，需要判断是否有两个以上的解，所以在用舞蹈链搜索的时候记录解的个数，如果解的个数大于2个就停止搜索。这里需要注意的是，找到第一个解后需要用数组把搜索过程中选择的行保存下来，因为下一次搜索不一定能得到第二个正确答案，但是在求解的过程中会取得第一个答案选择的行覆盖掉，所以不能用搜索选择的行来作为正确答案选择的行。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* http://acm.hdu.edu.cn/showproblem.php?pid=4069 */</span></span><br><span class="line"><span class="comment">/* AC 764MS 1324K */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dance_link</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_ROWS = MAX_N * MAX_N * MAX_N;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_COLS = <span class="number">4</span> * MAX_N * MAX_N;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> u, d, l, r;</span><br><span class="line"><span class="keyword">int</span> row, col;</span><br><span class="line">&#125; node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rows, cols, node_size;</span><br><span class="line">node nd[MAX_ROWS * <span class="number">4</span> * MAX_N];</span><br><span class="line"><span class="keyword">int</span> row_head[MAX_ROWS], col_nds[MAX_COLS];</span><br><span class="line"><span class="keyword">int</span> path[MAX_ROWS];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ansl, *select_rows;</span><br><span class="line"><span class="keyword">int</span> ans_num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> rows, <span class="keyword">int</span> cols)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span> -&gt; rows = rows;</span><br><span class="line"><span class="keyword">this</span> -&gt; cols = cols;</span><br><span class="line"><span class="comment">/* 初始化每一列的头节点 */</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= cols; i++)</span><br><span class="line">&#123;</span><br><span class="line">nd[i].u = i;</span><br><span class="line">nd[i].d = i;</span><br><span class="line">nd[i].l = i - <span class="number">1</span>;</span><br><span class="line">nd[i].r = i + <span class="number">1</span>;</span><br><span class="line">col_nds[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">nd[<span class="number">0</span>].l = cols;</span><br><span class="line">nd[cols].r = <span class="number">0</span>;</span><br><span class="line">node_size = cols + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化每一行的行指针 */</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= rows; i++)</span><br><span class="line">&#123;</span><br><span class="line">row_head[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_node</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* nd[node_size]为新添加的节点 */</span></span><br><span class="line">nd[node_size].row = row;</span><br><span class="line">nd[node_size].col = col;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将新添加的节点与其所在的列连接 */</span></span><br><span class="line">nd[node_size].u = col;</span><br><span class="line">nd[node_size].d = nd[col].d;</span><br><span class="line">nd[nd[col].d].u = node_size;</span><br><span class="line">nd[col].d = node_size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将新添加的节点与其所在的行连接 */</span></span><br><span class="line"><span class="keyword">if</span>(row_head[row] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">row_head[row] = node_size;</span><br><span class="line">nd[node_size].l = node_size;</span><br><span class="line">nd[node_size].r = node_size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> row_first = row_head[row];</span><br><span class="line">nd[node_size].r = row_first;</span><br><span class="line">nd[node_size].l = nd[row_first].l;</span><br><span class="line">nd[nd[row_first].l].r = node_size;</span><br><span class="line">nd[row_first].l = node_size;</span><br><span class="line">&#125;</span><br><span class="line">col_nds[col]++;</span><br><span class="line">node_size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将第col列从十字链表里移除 */</span></span><br><span class="line">nd[nd[col].l].r = nd[col].r;</span><br><span class="line">nd[nd[col].r].l = nd[col].l;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将与第col列里节点有关的行移除 */</span></span><br><span class="line"><span class="keyword">for</span>(i = nd[col].d; i != col; i = nd[i].d)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = nd[i].r; j != i; j = nd[j].r)</span><br><span class="line">&#123;</span><br><span class="line">nd[nd[j].u].d = nd[j].d;</span><br><span class="line">nd[nd[j].d].u = nd[j].u;</span><br><span class="line">col_nds[nd[j].col]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resume</span><span class="params">(<span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将第col列从十字链表里恢复 */</span></span><br><span class="line">nd[nd[col].l].r = col;</span><br><span class="line">nd[nd[col].r].l = col;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将与第col列里节点有关的行恢复 */</span></span><br><span class="line"><span class="keyword">for</span>(i = nd[col].d; i != col; i = nd[i].d)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = nd[i].r; j != i; j = nd[j].r)</span><br><span class="line">&#123;</span><br><span class="line">nd[nd[j].u].d = j;</span><br><span class="line">nd[nd[j].d].u = j;</span><br><span class="line">col_nds[nd[j].col]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">int</span> res, select_col;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 当前十字链表没有列 */</span></span><br><span class="line"><span class="keyword">if</span>(nd[<span class="number">0</span>].r == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans_num++;</span><br><span class="line">ansl = len;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">select_rows[i] = path[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line">select_col = nd[<span class="number">0</span>].r;</span><br><span class="line"><span class="keyword">for</span>(i = nd[<span class="number">0</span>].r; i != <span class="number">0</span>; i = nd[i].r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(nd[i].d == i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(col_nds[select_col] &gt; col_nds[i])</span><br><span class="line">&#123;</span><br><span class="line">select_col = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">remove(select_col);</span><br><span class="line"><span class="keyword">for</span>(i = nd[select_col].d; i != select_col; i = nd[i].d)</span><br><span class="line">&#123;</span><br><span class="line">path[len] = nd[i].row;</span><br><span class="line"><span class="keyword">for</span>(j = nd[i].r; j != i; j = nd[j].r)</span><br><span class="line">&#123;</span><br><span class="line">remove(nd[j].col);</span><br><span class="line">&#125;</span><br><span class="line">res = dfs(len + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(res &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ans_num &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j = nd[i].l; j != i; j = nd[j].l)</span><br><span class="line">&#123;</span><br><span class="line">resume(nd[j].col);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">resume(select_col);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">bool is_min_ans: 是否求答案最小值，如果不是，得到一个可行解就返回，默认求最小值。</span></span><br><span class="line"><span class="comment">int select_rows[]: 用于保存选择的行，取NULL时不保存，默认取NULL。</span></span><br><span class="line"><span class="comment">int limit：答案的上限，取-1时无上限，默认为-1。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> select_rows[] = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ans_num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;select_rows = select_rows;</span><br><span class="line">dfs(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> ans_num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; dance_link;</span><br><span class="line"></span><br><span class="line">dance_link dl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> grp;</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>];</span><br><span class="line">&#125; node;</span><br><span class="line"></span><br><span class="line">node mp[MAX_N][MAX_N];</span><br><span class="line"><span class="keyword">int</span> dirs[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> grp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= <span class="number">9</span> || y &lt; <span class="number">0</span> || y &gt;= <span class="number">9</span> || mp[x][y].grp != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">mp[x][y].grp = grp;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[x][y].dir[i] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">dfs(x + dirs[i][<span class="number">0</span>], y + dirs[i][<span class="number">1</span>], grp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t, cas, i, j, k, in, row, ans_num;</span><br><span class="line"><span class="keyword">int</span> x[dl.MAX_ROWS], y[dl.MAX_ROWS], num[dl.MAX_ROWS], ans[dl.MAX_ROWS], ansl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line"><span class="keyword">for</span>(cas = <span class="number">1</span>; cas &lt;= t; cas++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;in);</span><br><span class="line">mp[i][j].num = in % <span class="number">16</span>;</span><br><span class="line">in = in &gt;&gt; <span class="number">4</span>;</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line">mp[i][j].dir[k] = in &amp; <span class="number">1</span>;</span><br><span class="line">in = in &gt;&gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">mp[i][j].grp = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[i][j].grp == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">dfs(i, j, k);</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dl.init(<span class="number">9</span> * <span class="number">9</span> * <span class="number">9</span>, <span class="number">4</span> * <span class="number">9</span> * <span class="number">9</span>);</span><br><span class="line">row = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[i][j].num == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; <span class="number">9</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line">dl.add_node(row, i * <span class="number">9</span> + j + <span class="number">1</span>);</span><br><span class="line">dl.add_node(row, <span class="number">81</span> + i * <span class="number">9</span> + k + <span class="number">1</span>);</span><br><span class="line">dl.add_node(row, <span class="number">162</span> + j * <span class="number">9</span> + k + <span class="number">1</span>);</span><br><span class="line">dl.add_node(row, <span class="number">243</span> + (mp[i][j].grp - <span class="number">1</span>) * <span class="number">9</span> + k + <span class="number">1</span>);</span><br><span class="line">x[row] = i;</span><br><span class="line">y[row] = j;</span><br><span class="line">num[row] = k + <span class="number">1</span>;</span><br><span class="line">row++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">k = mp[i][j].num - <span class="number">1</span>;</span><br><span class="line">dl.add_node(row, i * <span class="number">9</span> + j + <span class="number">1</span>);</span><br><span class="line">dl.add_node(row, <span class="number">81</span> + i * <span class="number">9</span> + k + <span class="number">1</span>);</span><br><span class="line">dl.add_node(row, <span class="number">162</span> + j * <span class="number">9</span> + k + <span class="number">1</span>);</span><br><span class="line">dl.add_node(row, <span class="number">243</span> + (mp[i][j].grp - <span class="number">1</span>) * <span class="number">9</span> + k + <span class="number">1</span>);</span><br><span class="line">x[row] = i;</span><br><span class="line">y[row] = j;</span><br><span class="line">num[row] = k + <span class="number">1</span>;</span><br><span class="line">row++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ans_num = dl.solve(ans);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>, cas);</span><br><span class="line"><span class="keyword">if</span>(ans_num &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No solution\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ans_num == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; dl.ansl; k++)</span><br><span class="line">&#123;</span><br><span class="line">i = x[ans[k]];</span><br><span class="line">j = y[ans[k]];</span><br><span class="line">mp[i][j].num = num[ans[k]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, mp[i][j].num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Multiple Solutions\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">144 18 112 208 80 25 54 144 48</span></span><br><span class="line"><span class="comment">135 38 147 80 121 128 97 130 32</span></span><br><span class="line"><span class="comment">137 32 160 144 114 167 208 0 32</span></span><br><span class="line"><span class="comment">192 100 160 160 208 96 183 192 101</span></span><br><span class="line"><span class="comment">209 80 39 192 86 48 136 80 114</span></span><br><span class="line"><span class="comment">152 48 226 144 112 160 160 149 48</span></span><br><span class="line"><span class="comment">128 0 112 166 215 96 160 128 41</span></span><br><span class="line"><span class="comment">128 39 153 32 209 80 101 136 35</span></span><br><span class="line"><span class="comment">192 96 200 67 80 112 208 68 96 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">144 48 144 81 81 16 53 144 48</span></span><br><span class="line"><span class="comment">128 96 224 144 48 128 103 128 38</span></span><br><span class="line"><span class="comment">163 208 80 0 37 224 209 0 32</span></span><br><span class="line"><span class="comment">135 48 176 192 64 112 176 192 104</span></span><br><span class="line"><span class="comment">192 101 128 89 80 82 32 150 48</span></span><br><span class="line"><span class="comment">149 48 224 208 16 48 224 192 33</span></span><br><span class="line"><span class="comment">128 0 114 176 135 0 80 112 169</span></span><br><span class="line"><span class="comment">137 32 148 32 192 96 176 144 32</span></span><br><span class="line"><span class="comment">192 96 193 64 80 80 96 192 96</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">144 88 48 217 16 16 80 112 176</span></span><br><span class="line"><span class="comment">224 176 129 48 128 40 208 16 37</span></span><br><span class="line"><span class="comment">145 32 128 96 196 96 176 136 32</span></span><br><span class="line"><span class="comment">192 32 227 176 144 80 96 192 32</span></span><br><span class="line"><span class="comment">176 192 80 98 160 145 80 48 224</span></span><br><span class="line"><span class="comment">128 48 144 80 96 224 183 128 48</span></span><br><span class="line"><span class="comment">128 36 224 144 51 144 32 128 105</span></span><br><span class="line"><span class="comment">131 64 112 136 32 192 36 224 176</span></span><br><span class="line"><span class="comment">224 208 80 64 64 116 192 83 96</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Case 1:</span></span><br><span class="line"><span class="comment">521439678</span></span><br><span class="line"><span class="comment">763895124</span></span><br><span class="line"><span class="comment">984527361</span></span><br><span class="line"><span class="comment">346182795</span></span><br><span class="line"><span class="comment">157964832</span></span><br><span class="line"><span class="comment">812743956</span></span><br><span class="line"><span class="comment">235678419</span></span><br><span class="line"><span class="comment">479216583</span></span><br><span class="line"><span class="comment">698351247</span></span><br><span class="line"><span class="comment">Case 2:</span></span><br><span class="line"><span class="comment">No solution</span></span><br><span class="line"><span class="comment">Case 3:</span></span><br><span class="line"><span class="comment">Multiple Solutions</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;变形的数独问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="hdu" scheme="http://nchuacm.github.io/tags/hdu/"/>
    
      <category term="舞蹈链" scheme="http://nchuacm.github.io/tags/%E8%88%9E%E8%B9%88%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>ZOJ-3122 Sudoku</title>
    <link href="http://nchuacm.github.io/acm/zoj-3122/"/>
    <id>http://nchuacm.github.io/acm/zoj-3122/</id>
    <published>2020-03-27T08:03:14.000Z</published>
    <updated>2021-12-24T08:54:59.835Z</updated>
    
    <content type="html"><![CDATA[<p>用舞蹈链来解决16×16数独问题</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>&emsp;&emsp;<a href="https://zoj.pintia.cn/problem-sets/91827364500/problems/91827367537" target="_blank" rel="noopener">https://zoj.pintia.cn/problem-sets/91827364500/problems/91827367537</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>&emsp;&emsp;给一个16×16的矩阵，求解数独问题。</p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>&emsp;&emsp;这题跟上一题的解法类似，只是上一题是9×9，这题是16×16，具体请参考<a href="https://nchuxw.github.io/post/poj-3074-sudoku/" target="_blank" rel="noopener">https://nchuxw.github.io/post/poj-3074-sudoku/</a>，题目的测试样例的输入有问题，需要改正，还有就是输出的时候最后一个测试样例不要换行，否则会<code>Presentation Error</code>。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* https://zoj.pintia.cn/problem-sets/91827364500/problems/91827367537 */</span></span><br><span class="line"><span class="comment">/* AC 201ms640kb */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 舞蹈链算法，用于求不重复精确覆盖问题 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dance_link</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_ROWS = MAX_N * MAX_N * MAX_N + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_COLS = MAX_N * MAX_N * <span class="number">4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> u, d, l, r;</span><br><span class="line"><span class="keyword">int</span> row, col;</span><br><span class="line">&#125; node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rows, cols, node_size;</span><br><span class="line">node nd[(MAX_ROWS + <span class="number">1</span>) * MAX_COLS];</span><br><span class="line"><span class="keyword">int</span> row_head[MAX_ROWS], col_nds[MAX_COLS];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> is_min_ans;</span><br><span class="line"><span class="keyword">int</span> limit;</span><br><span class="line"><span class="keyword">int</span> ans, *select_rows;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> rows, <span class="keyword">int</span> cols)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span> -&gt; rows = rows;</span><br><span class="line"><span class="keyword">this</span> -&gt; cols = cols;</span><br><span class="line"><span class="comment">/* 初始化每一列的头节点 */</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= cols; i++)</span><br><span class="line">&#123;</span><br><span class="line">nd[i].u = i;</span><br><span class="line">nd[i].d = i;</span><br><span class="line">nd[i].l = i - <span class="number">1</span>;</span><br><span class="line">nd[i].r = i + <span class="number">1</span>;</span><br><span class="line">col_nds[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">nd[<span class="number">0</span>].l = cols;</span><br><span class="line">nd[cols].r = <span class="number">0</span>;</span><br><span class="line">node_size = cols + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化每一行的行指针 */</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= rows; i++)</span><br><span class="line">&#123;</span><br><span class="line">row_head[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_node</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* nd[node_size]为新添加的节点 */</span></span><br><span class="line">nd[node_size].row = row;</span><br><span class="line">nd[node_size].col = col;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将新添加的节点与其所在的列连接 */</span></span><br><span class="line">nd[node_size].u = col;</span><br><span class="line">nd[node_size].d = nd[col].d;</span><br><span class="line">nd[nd[col].d].u = node_size;</span><br><span class="line">nd[col].d = node_size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将新添加的节点与其所在的行连接 */</span></span><br><span class="line"><span class="keyword">if</span>(row_head[row] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">row_head[row] = node_size;</span><br><span class="line">nd[node_size].l = node_size;</span><br><span class="line">nd[node_size].r = node_size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> row_first = row_head[row];</span><br><span class="line">nd[node_size].r = row_first;</span><br><span class="line">nd[node_size].l = nd[row_first].l;</span><br><span class="line">nd[nd[row_first].l].r = node_size;</span><br><span class="line">nd[row_first].l = node_size;</span><br><span class="line">&#125;</span><br><span class="line">col_nds[col]++;</span><br><span class="line">node_size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将第col列从十字链表里移除 */</span></span><br><span class="line">nd[nd[col].l].r = nd[col].r;</span><br><span class="line">nd[nd[col].r].l = nd[col].l;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将与第col列里节点有关的行移除 */</span></span><br><span class="line"><span class="keyword">for</span>(i = nd[col].d; i != col; i = nd[i].d)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = nd[i].r; j != i; j = nd[j].r)</span><br><span class="line">&#123;</span><br><span class="line">nd[nd[j].u].d = nd[j].d;</span><br><span class="line">nd[nd[j].d].u = nd[j].u;</span><br><span class="line">col_nds[nd[j].col]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resume</span><span class="params">(<span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将第col列从十字链表里恢复 */</span></span><br><span class="line">nd[nd[col].l].r = col;</span><br><span class="line">nd[nd[col].r].l = col;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将与第col列里节点有关的行恢复 */</span></span><br><span class="line"><span class="keyword">for</span>(i = nd[col].d; i != col; i = nd[i].d)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = nd[i].r; j != i; j = nd[j].r)</span><br><span class="line">&#123;</span><br><span class="line">nd[nd[j].u].d = j;</span><br><span class="line">nd[nd[j].d].u = j;</span><br><span class="line">col_nds[nd[j].col]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">int</span> res, select_col;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断是否超过了界限 */</span></span><br><span class="line"><span class="keyword">if</span>(limit != <span class="number">-1</span> &amp;&amp; len &gt; limit)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(is_min_ans == <span class="literal">true</span> &amp;&amp; ans != <span class="number">-1</span> &amp;&amp; len &gt; ans)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 当前十字链表没有列 */</span></span><br><span class="line"><span class="keyword">if</span>(nd[<span class="number">0</span>].r == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line">select_col = nd[<span class="number">0</span>].r;</span><br><span class="line"><span class="keyword">for</span>(i = nd[<span class="number">0</span>].r; i != <span class="number">0</span>; i = nd[i].r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(nd[i].d == i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(col_nds[select_col] &gt; col_nds[i])</span><br><span class="line">&#123;</span><br><span class="line">select_col = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">remove(select_col);</span><br><span class="line"><span class="keyword">for</span>(i = nd[select_col].d; i != select_col; i = nd[i].d)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(select_rows != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">select_rows[len] = nd[i].row;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j = nd[i].r; j != i; j = nd[j].r)</span><br><span class="line">&#123;</span><br><span class="line">remove(nd[j].col);</span><br><span class="line">&#125;</span><br><span class="line">res = dfs(len + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(res &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(is_min_ans == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ans &lt; <span class="number">0</span> || ans &gt; res)</span><br><span class="line">&#123;</span><br><span class="line">ans = res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j = nd[i].l; j != i; j = nd[j].l)</span><br><span class="line">&#123;</span><br><span class="line">resume(nd[j].col);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">resume(select_col);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">bool is_min_ans: 是否求答案最小值，如果不是，得到一个可行解就返回，默认求最小值。</span></span><br><span class="line"><span class="comment">int select_rows[]: 用于保存选择的行，取NULL时不保存，默认取NULL。</span></span><br><span class="line"><span class="comment">int limit：答案的上限，取-1时无上限，默认为-1。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">bool</span> is_min_ans = <span class="literal">true</span>, <span class="keyword">int</span> select_rows[] = <span class="number">0</span>, <span class="keyword">int</span> limit = <span class="number">-1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;is_min_ans = is_min_ans;</span><br><span class="line"><span class="keyword">this</span>-&gt;select_rows = select_rows;</span><br><span class="line"><span class="keyword">this</span>-&gt;limit = limit;</span><br><span class="line">ans = <span class="number">-1</span>;</span><br><span class="line">ans = dfs(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; dance_link;</span><br><span class="line"></span><br><span class="line">dance_link dl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k, t, row;</span><br><span class="line"><span class="keyword">char</span> str[MAX_N + <span class="number">10</span>][MAX_N + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> x[dl.MAX_ROWS], y[dl.MAX_ROWS], num[dl.MAX_ROWS], ans[dl.MAX_ROWS], ansl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(t = <span class="number">0</span>; ; t++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>, str[i]) == EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i &lt; <span class="number">16</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dl.init(<span class="number">16</span> * <span class="number">16</span> * <span class="number">16</span>, <span class="number">4</span> * <span class="number">16</span> * <span class="number">16</span>);</span><br><span class="line">row = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">'A'</span> &lt;= str[i][j] &amp;&amp; str[i][j] &lt;= <span class="string">'Z'</span>)</span><br><span class="line">&#123;</span><br><span class="line">k = (<span class="keyword">int</span>)(str[i][j] - <span class="string">'A'</span>);</span><br><span class="line">dl.add_node(row, i * <span class="number">16</span> + j + <span class="number">1</span>);</span><br><span class="line">dl.add_node(row, <span class="number">256</span> + i * <span class="number">16</span> + k + <span class="number">1</span>);</span><br><span class="line">dl.add_node(row, <span class="number">512</span> + j * <span class="number">16</span> + k + <span class="number">1</span>);</span><br><span class="line">dl.add_node(row, <span class="number">768</span> + (i / <span class="number">4</span> * <span class="number">4</span> + j / <span class="number">4</span>) * <span class="number">16</span> + k + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// printf("(%d,%d) ", row, i * 16 + j + 1);</span></span><br><span class="line"><span class="comment">// printf("(%d,%d) ", row, 256 + i * 16 + k + 1);</span></span><br><span class="line"><span class="comment">// printf("(%d,%d) ", row, 512 + j * 16 + k + 1);</span></span><br><span class="line"><span class="comment">// printf("(%d,%d)\n", row, 768 + (i / 4 * 4 + j / 4) * 16 + k + 1);</span></span><br><span class="line">x[row] = i;</span><br><span class="line">y[row] = j;</span><br><span class="line">num[row] = k;</span><br><span class="line">row++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i][j] == <span class="string">'-'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; <span class="number">16</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line">dl.add_node(row, i * <span class="number">16</span> + j + <span class="number">1</span>);</span><br><span class="line">dl.add_node(row, <span class="number">256</span> + i * <span class="number">16</span> + k + <span class="number">1</span>);</span><br><span class="line">dl.add_node(row, <span class="number">512</span> + j * <span class="number">16</span> + k + <span class="number">1</span>);</span><br><span class="line">dl.add_node(row, <span class="number">768</span> + (i / <span class="number">4</span> * <span class="number">4</span> + j / <span class="number">4</span>) * <span class="number">16</span> + k + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// printf("(%d,%d) ", row, i * 16 + j + 1);</span></span><br><span class="line"><span class="comment">// printf("(%d,%d) ", row, 256 + i * 16 + k + 1);</span></span><br><span class="line"><span class="comment">// printf("(%d,%d) ", row, 512 + j * 16 + k + 1);</span></span><br><span class="line"><span class="comment">// printf("(%d,%d)\n", row, 768 + (i / 4 * 4 + j / 4) * 16 + k + 1);</span></span><br><span class="line">x[row] = i;</span><br><span class="line">y[row] = j;</span><br><span class="line">num[row] = k;</span><br><span class="line">row++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ansl = dl.solve(<span class="literal">false</span>, ans);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; ansl; i++)</span><br><span class="line">&#123;</span><br><span class="line">str[x[ans[i]]][y[ans[i]]] = (<span class="keyword">char</span>)(<span class="string">'A'</span> + num[ans[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">str[i][<span class="number">16</span>] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, str[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--A----C-----O-I</span></span><br><span class="line"><span class="comment">-J--A-B-P-CGF-H-</span></span><br><span class="line"><span class="comment">--D--F-I-E----P-</span></span><br><span class="line"><span class="comment">-G-EL-H----M-J--</span></span><br><span class="line"><span class="comment">----E----C--G---</span></span><br><span class="line"><span class="comment">-I--K-GA-B---E-J</span></span><br><span class="line"><span class="comment">D-GP--J-F----A--</span></span><br><span class="line"><span class="comment">-E---C-B--DP--O-</span></span><br><span class="line"><span class="comment">E--F-M--D--L-K-A</span></span><br><span class="line"><span class="comment">-C--------O-I-L-</span></span><br><span class="line"><span class="comment">H-P-C--F-A--B---</span></span><br><span class="line"><span class="comment">---G-OD---J----H</span></span><br><span class="line"><span class="comment">K---J----H-A-P-L</span></span><br><span class="line"><span class="comment">--B--P--E--K--A-</span></span><br><span class="line"><span class="comment">-H--B--K--FI-C--</span></span><br><span class="line"><span class="comment">--F---C--D--H-N-</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">FPAHMJECNLBDKOGI</span></span><br><span class="line"><span class="comment">OJMIANBDPKCGFLHE</span></span><br><span class="line"><span class="comment">LNDKGFOIJEAHMBPC</span></span><br><span class="line"><span class="comment">BGCELKHPOFIMAJDN</span></span><br><span class="line"><span class="comment">MFHBELPOACKJGNID</span></span><br><span class="line"><span class="comment">CILNKDGAHBMOPEFJ</span></span><br><span class="line"><span class="comment">DOGPIHJMFNLECAKB</span></span><br><span class="line"><span class="comment">JEKAFCNBGIDPLHOM</span></span><br><span class="line"><span class="comment">EBOFPMIJDGHLNKCA</span></span><br><span class="line"><span class="comment">NCJDHBAEKMOFIGLP</span></span><br><span class="line"><span class="comment">HMPLCGKFIAENBDJO</span></span><br><span class="line"><span class="comment">AKIGNODLBPJCEFMH</span></span><br><span class="line"><span class="comment">KDEMJIFNCHGAOPBL</span></span><br><span class="line"><span class="comment">GLBCDPMHEONKJIAF</span></span><br><span class="line"><span class="comment">PHNOBALKMJFIDCEG</span></span><br><span class="line"><span class="comment">IAFJOECGLDPBHMNK</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用舞蹈链来解决16×16数独问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="舞蹈链" scheme="http://nchuacm.github.io/tags/%E8%88%9E%E8%B9%88%E9%93%BE/"/>
    
      <category term="poj" scheme="http://nchuacm.github.io/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>POJ-3074 Sudoku</title>
    <link href="http://nchuacm.github.io/acm/poj-3074/"/>
    <id>http://nchuacm.github.io/acm/poj-3074/</id>
    <published>2020-03-27T01:41:34.000Z</published>
    <updated>2021-12-24T08:55:31.491Z</updated>
    
    <content type="html"><![CDATA[<p>用舞蹈链来解决数独问题</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>&emsp;&emsp;<a href="http://poj.org/problem?id=3074" target="_blank" rel="noopener">http://poj.org/problem?id=3074</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>&emsp;&emsp;标准的9×9数独问题，给出一个9×9的矩阵，需要填入1到9之间的数字，使得每一行、每一列以及每一个3×3子矩阵的数字都不重复。题目给出已经填了一部分数字的矩阵，需要将剩余部分填完。</p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>&emsp;&emsp;可以用舞蹈链的精确覆盖算法来解决数独问题。首先对于每个位置有9个可以填入的数字，共有9×9个位置，所以可以分成9×9×9=729种填充情况，每种情况对应于舞蹈链里十字链表的一行。<br>&emsp;&emsp;对于每一种填充情况，有4个约束：<br>&emsp;&emsp;&emsp;1. 每个位置都要填数字，不能不填。<br>&emsp;&emsp;&emsp;2. 一行不能有重复的数字。<br>&emsp;&emsp;&emsp;3. 一列不能有重复的数字。<br>&emsp;&emsp;&emsp;4. 每个3×3的子矩阵内不能有重复的数字。<br>&emsp;&emsp;第1种约束可以用十字链表的81(9×9个位置)列来对应，如果舞蹈链计算结果所选择的行能覆盖这81列，则说明81个位置都填了数字。第2种约束也用81列来对应，因为共有9行，要保证每行没有重复的数字，只需要每行都填9个不同的数字就行，如果这81列都被覆盖，且没有重复覆盖，就能满足第二个约束了。第3种和第4种约束与第2种类似，都分别用81列来对应。4种约束一共用4×9×9=324列来对应。<br>&emsp;&emsp;729种填充情况里，每选择一种填充情况，都会占用一个9×9里的一个位置，占用9行里某一行的一个数字、9列里某一列的一个数字，9个3×3的子矩阵里的一个数字，所以每种填充情况都会覆盖4列。因为有一部分位置已经被预先填好了，所以已经填了数字的位置和没填数字的位置，需要分开来处理，没有填数字的位置需要枚举填1～9的9种填充情况，每种填充情况将对应的4列加入十字链表了，已经填了的就直接处理对应数字的填充情况就好了。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* http://poj.org/problem?id=3074 */</span></span><br><span class="line"><span class="comment">/* AC 372K63MS */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 舞蹈链算法，用于求不重复精确覆盖问题 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dance_link</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_ROWS = MAX_N * MAX_N * MAX_N;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_COLS = MAX_N * MAX_N * <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> u, d, l, r;</span><br><span class="line"><span class="keyword">int</span> row, col;</span><br><span class="line">&#125; node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rows, cols, node_size;</span><br><span class="line">node nd[(MAX_ROWS + <span class="number">1</span>) * MAX_COLS + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> row_head[MAX_ROWS], col_nds[MAX_COLS];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> is_min_ans;</span><br><span class="line"><span class="keyword">int</span> limit;</span><br><span class="line"><span class="keyword">int</span> ans, *select_rows;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> rows, <span class="keyword">int</span> cols)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span> -&gt; rows = rows;</span><br><span class="line"><span class="keyword">this</span> -&gt; cols = cols;</span><br><span class="line"><span class="comment">/* 初始化每一列的头节点 */</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= cols; i++)</span><br><span class="line">&#123;</span><br><span class="line">nd[i].u = i;</span><br><span class="line">nd[i].d = i;</span><br><span class="line">nd[i].l = i - <span class="number">1</span>;</span><br><span class="line">nd[i].r = i + <span class="number">1</span>;</span><br><span class="line">col_nds[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">nd[<span class="number">0</span>].l = cols;</span><br><span class="line">nd[cols].r = <span class="number">0</span>;</span><br><span class="line">node_size = cols + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化每一行的行指针 */</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= rows; i++)</span><br><span class="line">&#123;</span><br><span class="line">row_head[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_node</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* nd[node_size]为新添加的节点 */</span></span><br><span class="line">nd[node_size].row = row;</span><br><span class="line">nd[node_size].col = col;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将新添加的节点与其所在的列连接 */</span></span><br><span class="line">nd[node_size].u = col;</span><br><span class="line">nd[node_size].d = nd[col].d;</span><br><span class="line">nd[nd[col].d].u = node_size;</span><br><span class="line">nd[col].d = node_size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将新添加的节点与其所在的行连接 */</span></span><br><span class="line"><span class="keyword">if</span>(row_head[row] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">row_head[row] = node_size;</span><br><span class="line">nd[node_size].l = node_size;</span><br><span class="line">nd[node_size].r = node_size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> row_first = row_head[row];</span><br><span class="line">nd[node_size].r = row_first;</span><br><span class="line">nd[node_size].l = nd[row_first].l;</span><br><span class="line">nd[nd[row_first].l].r = node_size;</span><br><span class="line">nd[row_first].l = node_size;</span><br><span class="line">&#125;</span><br><span class="line">col_nds[col]++;</span><br><span class="line">node_size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将第col列从十字链表里移除 */</span></span><br><span class="line">nd[nd[col].l].r = nd[col].r;</span><br><span class="line">nd[nd[col].r].l = nd[col].l;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将与第col列里节点有关的行移除 */</span></span><br><span class="line"><span class="keyword">for</span>(i = nd[col].d; i != col; i = nd[i].d)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = nd[i].r; j != i; j = nd[j].r)</span><br><span class="line">&#123;</span><br><span class="line">nd[nd[j].u].d = nd[j].d;</span><br><span class="line">nd[nd[j].d].u = nd[j].u;</span><br><span class="line">col_nds[nd[j].col]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resume</span><span class="params">(<span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将第col列从十字链表里恢复 */</span></span><br><span class="line">nd[nd[col].l].r = col;</span><br><span class="line">nd[nd[col].r].l = col;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将与第col列里节点有关的行恢复 */</span></span><br><span class="line"><span class="keyword">for</span>(i = nd[col].d; i != col; i = nd[i].d)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = nd[i].r; j != i; j = nd[j].r)</span><br><span class="line">&#123;</span><br><span class="line">nd[nd[j].u].d = j;</span><br><span class="line">nd[nd[j].d].u = j;</span><br><span class="line">col_nds[nd[j].col]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">int</span> res, select_col;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断是否超过了界限 */</span></span><br><span class="line"><span class="keyword">if</span>(limit != <span class="number">-1</span> &amp;&amp; len &gt; limit)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(is_min_ans == <span class="literal">true</span> &amp;&amp; ans != <span class="number">-1</span> &amp;&amp; len &gt; ans)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 当前十字链表没有列 */</span></span><br><span class="line"><span class="keyword">if</span>(nd[<span class="number">0</span>].r == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line">select_col = nd[<span class="number">0</span>].r;</span><br><span class="line"><span class="keyword">for</span>(i = nd[<span class="number">0</span>].r; i != <span class="number">0</span>; i = nd[i].r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(nd[i].d == i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(col_nds[select_col] &gt; col_nds[i])</span><br><span class="line">&#123;</span><br><span class="line">select_col = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">remove(select_col);</span><br><span class="line"><span class="keyword">for</span>(i = nd[select_col].d; i != select_col; i = nd[i].d)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(select_rows != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">select_rows[len] = nd[i].row;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j = nd[i].r; j != i; j = nd[j].r)</span><br><span class="line">&#123;</span><br><span class="line">remove(nd[j].col);</span><br><span class="line">&#125;</span><br><span class="line">res = dfs(len + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(res &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(is_min_ans == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ans &lt; <span class="number">0</span> || ans &gt; res)</span><br><span class="line">&#123;</span><br><span class="line">ans = res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j = nd[i].l; j != i; j = nd[j].l)</span><br><span class="line">&#123;</span><br><span class="line">resume(nd[j].col);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">resume(select_col);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">bool is_min_ans: 是否求答案最小值，如果不是，得到一个可行解就返回，默认求最小值。</span></span><br><span class="line"><span class="comment">int select_rows[]: 用于保存选择的行，取NULL时不保存，默认取NULL。</span></span><br><span class="line"><span class="comment">int limit：答案的上限，取-1时无上限，默认为-1。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">bool</span> is_min_ans = <span class="literal">true</span>, <span class="keyword">int</span> select_rows[] = <span class="number">0</span>, <span class="keyword">int</span> limit = <span class="number">-1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;is_min_ans = is_min_ans;</span><br><span class="line"><span class="keyword">this</span>-&gt;select_rows = select_rows;</span><br><span class="line"><span class="keyword">this</span>-&gt;limit = limit;</span><br><span class="line">ans = <span class="number">-1</span>;</span><br><span class="line">ans = dfs(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; dance_link;</span><br><span class="line"></span><br><span class="line">dance_link dl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k, len, r, c, row;</span><br><span class="line"><span class="keyword">int</span> x[dl.MAX_ROWS], y[dl.MAX_ROWS], num[dl.MAX_ROWS], ans[dl.MAX_ROWS], ansl;</span><br><span class="line"><span class="keyword">char</span> str[MAX_N * MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(fgets(str, MAX_N * MAX_N, <span class="built_in">stdin</span>) != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">81</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i] == <span class="string">'.'</span>)</span><br><span class="line">&#123;</span><br><span class="line">str[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">'0'</span> &lt;= str[i] &amp;&amp; str[i] &lt;= <span class="string">'9'</span>)</span><br><span class="line">&#123;</span><br><span class="line">str[i] = str[i] - <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// printf("%d ", str[i]);</span></span><br><span class="line"><span class="comment">// if((i + 1) % 9 == 0)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// printf("\n");</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// printf("\n");</span></span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dl.init(<span class="number">9</span> * <span class="number">9</span> * <span class="number">9</span>, <span class="number">4</span> * <span class="number">9</span> * <span class="number">9</span>);</span><br><span class="line">row = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">81</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">r = i / <span class="number">9</span>;</span><br><span class="line">c = i % <span class="number">9</span>;</span><br><span class="line"><span class="keyword">if</span>(str[i] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; <span class="number">9</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line">dl.add_node(row, r * <span class="number">9</span> + c + <span class="number">1</span>);</span><br><span class="line">dl.add_node(row, <span class="number">81</span> + r * <span class="number">9</span> + k + <span class="number">1</span>);</span><br><span class="line">dl.add_node(row, <span class="number">162</span> + c * <span class="number">9</span> + k + <span class="number">1</span>);</span><br><span class="line">dl.add_node(row, <span class="number">243</span> + (r / <span class="number">3</span> * <span class="number">3</span> + c / <span class="number">3</span>) * <span class="number">9</span> + k + <span class="number">1</span>);</span><br><span class="line">x[row] = r;</span><br><span class="line">y[row] = c;</span><br><span class="line">num[row] = k + <span class="number">1</span>;</span><br><span class="line">row++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">k = str[i] - <span class="number">1</span>;</span><br><span class="line">dl.add_node(row, r * <span class="number">9</span> + c + <span class="number">1</span>);</span><br><span class="line">dl.add_node(row, <span class="number">81</span> + r * <span class="number">9</span> + k + <span class="number">1</span>);</span><br><span class="line">dl.add_node(row, <span class="number">162</span> + c * <span class="number">9</span> + k + <span class="number">1</span>);</span><br><span class="line">dl.add_node(row, <span class="number">243</span> + (r / <span class="number">3</span> * <span class="number">3</span> + c / <span class="number">3</span>) * <span class="number">9</span> + k + <span class="number">1</span>);</span><br><span class="line">x[row] = r;</span><br><span class="line">y[row] = c;</span><br><span class="line">num[row] = k + <span class="number">1</span>;</span><br><span class="line">row++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ansl = dl.solve(<span class="literal">false</span>, ans);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; ansl; i++)</span><br><span class="line">&#123;</span><br><span class="line">r = x[ans[i]];</span><br><span class="line">c = y[ans[i]];</span><br><span class="line">k = num[ans[i]];</span><br><span class="line">str[r * <span class="number">9</span> + c] = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for(i = 0; i &lt; 81; i++)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// printf("%d ", str[i]);</span></span><br><span class="line"><span class="comment">// if((i + 1) % 9 == 0)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// printf("\n");</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// printf("\n");</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">81</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, str[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">.2738..1..1...6735.......293.5692.8...........6.1745.364.......9518...7..8..6534.</span></span><br><span class="line"><span class="comment">......52..8.4......3...9...5.1...6..2..7........3.....6...1..........7.4.......3.</span></span><br><span class="line"><span class="comment">end</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用舞蹈链来解决数独问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="舞蹈链" scheme="http://nchuacm.github.io/tags/%E8%88%9E%E8%B9%88%E9%93%BE/"/>
    
      <category term="poj" scheme="http://nchuacm.github.io/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>POJ-1084 Square Destroyer</title>
    <link href="http://nchuacm.github.io/acm/poj-1084/"/>
    <id>http://nchuacm.github.io/acm/poj-1084/</id>
    <published>2020-03-27T01:40:48.000Z</published>
    <updated>2021-12-24T08:55:48.652Z</updated>
    
    <content type="html"><![CDATA[<p>舞蹈链重复覆盖问题</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>&emsp;&emsp;<a href="http://poj.org/problem?id=1084" target="_blank" rel="noopener">http://poj.org/problem?id=1084</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>&emsp;&emsp;给出一个用火柴拼成的$n \times n$的网格（一共需要$2n(n+1)$根火柴），按顺序给每个火柴编号，然后去掉其中$k$个火柴。问至少还需要去掉几个火柴，使得网格没有任何正方形。</p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>&emsp;&emsp;这题可以用舞蹈链的重复覆盖算法解决，也有大佬用迭代深搜AC了。用舞蹈链的话关键在于构建覆盖关系矩阵，可以将正方形作为列，火柴作为行，如果第j个正方形的完整依赖于第i根火柴，则第i行的第j列为1，否则为0。这样题目就转化为选择最少的火柴，使得这些火柴能覆盖所有正方形，最后用使用舞蹈链重复覆盖算法模板就可以了。<br>&emsp;&emsp;比较麻烦的是，遍历所有的正方形需要枚举正方形左上角顶点坐标，然后再枚举正方形的边长，最后还要转一圈，遍历组成该正方形的所有火柴，这循环写的我想哭/(ㄒoㄒ)/~~。然后就是题目在求解前要先删除一些火柴，对于每个要删除的火柴，删的时候关键不是要删除火柴所在的行，而是要删除火柴能覆盖的正方形所对应的列。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 舞蹈链算法，用于求重复覆盖问题 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dance_link_rep</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_ROWS = <span class="number">2</span> * MAX_N * MAX_N;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_COLS = <span class="number">2</span> * MAX_N * MAX_N;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> u, d, l, r;</span><br><span class="line"><span class="keyword">int</span> row, col;</span><br><span class="line">&#125; node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rows, cols, node_size;</span><br><span class="line">node nd[MAX_ROWS * MAX_COLS];</span><br><span class="line"><span class="keyword">int</span> row_head[MAX_ROWS], col_nds[MAX_COLS];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> is_min_ans;</span><br><span class="line"><span class="keyword">int</span> limit;</span><br><span class="line"><span class="keyword">int</span> ans, *select_rows;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> rows, <span class="keyword">int</span> cols)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span> -&gt; rows = rows;</span><br><span class="line"><span class="keyword">this</span> -&gt; cols = cols;</span><br><span class="line"><span class="comment">/* 初始化每一列的头节点 */</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= cols; i++)</span><br><span class="line">&#123;</span><br><span class="line">nd[i].u = i;</span><br><span class="line">nd[i].d = i;</span><br><span class="line">nd[i].l = i - <span class="number">1</span>;</span><br><span class="line">nd[i].r = i + <span class="number">1</span>;</span><br><span class="line">col_nds[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">nd[<span class="number">0</span>].l = cols;</span><br><span class="line">nd[cols].r = <span class="number">0</span>;</span><br><span class="line">node_size = cols + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化每一行的行指针 */</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= rows; i++)</span><br><span class="line">&#123;</span><br><span class="line">row_head[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_node</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* nd[node_size]为新添加的节点 */</span></span><br><span class="line">nd[node_size].row = row;</span><br><span class="line">nd[node_size].col = col;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将新添加的节点与其所在的列连接 */</span></span><br><span class="line">nd[node_size].u = col;</span><br><span class="line">nd[node_size].d = nd[col].d;</span><br><span class="line">nd[nd[col].d].u = node_size;</span><br><span class="line">nd[col].d = node_size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将新添加的节点与其所在的行连接 */</span></span><br><span class="line"><span class="keyword">if</span>(row_head[row] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">row_head[row] = node_size;</span><br><span class="line">nd[node_size].l = node_size;</span><br><span class="line">nd[node_size].r = node_size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> row_first = row_head[row];</span><br><span class="line">nd[node_size].r = row_first;</span><br><span class="line">nd[node_size].l = nd[row_first].l;</span><br><span class="line">nd[nd[row_first].l].r = node_size;</span><br><span class="line">nd[row_first].l = node_size;</span><br><span class="line">&#125;</span><br><span class="line">col_nds[col]++;</span><br><span class="line">node_size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = nd[col].d; i != col; i = nd[i].d)</span><br><span class="line">&#123;</span><br><span class="line">nd[nd[i].r].l = nd[i].l;</span><br><span class="line">nd[nd[i].l].r = nd[i].r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resume</span><span class="params">(<span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = nd[col].u; i != col; i = nd[i].u)</span><br><span class="line">&#123;</span><br><span class="line">nd[nd[i].l].r = i;</span><br><span class="line">nd[nd[i].r].l = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 计算取得答案最少需要的行数 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_min_rows</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k, num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> v[MAX_COLS];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = nd[<span class="number">0</span>].r; i != <span class="number">0</span>; i = nd[i].r)</span><br><span class="line">&#123;</span><br><span class="line">v[i] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = nd[<span class="number">0</span>].r; i != <span class="number">0</span>; i = nd[i].r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v[i] == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">num++;</span><br><span class="line"><span class="keyword">for</span>(j = nd[i].d; j != i; j = nd[j].d)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(k = nd[j].r; k != j; k = nd[k].r)</span><br><span class="line">&#123;</span><br><span class="line">v[nd[k].col] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">int</span> res, select_col;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断是否超过了界限 */</span></span><br><span class="line"><span class="keyword">int</span> mr = get_min_rows();</span><br><span class="line"><span class="keyword">if</span>(limit != <span class="number">-1</span> &amp;&amp; len + mr &gt; limit)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(is_min_ans == <span class="literal">true</span> &amp;&amp; ans != <span class="number">-1</span> &amp;&amp; len + mr &gt;= ans)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 当前十字链表没有列 */</span></span><br><span class="line"><span class="keyword">if</span>(nd[<span class="number">0</span>].r == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line">select_col = nd[<span class="number">0</span>].r;</span><br><span class="line"><span class="keyword">for</span>(i = nd[<span class="number">0</span>].r; i != <span class="number">0</span>; i = nd[i].r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(nd[i].d == i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(col_nds[select_col] &gt; col_nds[i])</span><br><span class="line">&#123;</span><br><span class="line">select_col = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = nd[select_col].d; i != select_col; i = nd[i].d)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(select_rows != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">select_rows[len] = nd[i].row;</span><br><span class="line">&#125;</span><br><span class="line">remove(i);</span><br><span class="line"><span class="keyword">for</span>(j = nd[i].r; j != i; j = nd[j].r)</span><br><span class="line">&#123;</span><br><span class="line">remove(j);</span><br><span class="line">&#125;</span><br><span class="line">res = dfs(len + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(res &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(is_min_ans == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ans &lt; <span class="number">0</span> || ans &gt; res)</span><br><span class="line">&#123;</span><br><span class="line">ans = res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j = nd[i].l; j != i; j = nd[j].l)</span><br><span class="line">&#123;</span><br><span class="line">resume(j);</span><br><span class="line">&#125;</span><br><span class="line">resume(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">bool is_min_ans: 是否求答案最小值，如果不是，得到一个可行解就返回，默认求最小值。</span></span><br><span class="line"><span class="comment">int select_rows[]: 用于保存选择的行，取NULL时不保存，默认取NULL。</span></span><br><span class="line"><span class="comment">int limit：答案的上限，取-1时无上限，默认为-1。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">bool</span> is_min_ans = <span class="literal">true</span>, <span class="keyword">int</span> select_rows[] = <span class="number">0</span>, <span class="keyword">int</span> limit = <span class="number">-1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;is_min_ans = is_min_ans;</span><br><span class="line"><span class="keyword">this</span>-&gt;select_rows = select_rows;</span><br><span class="line"><span class="keyword">this</span>-&gt;limit = limit;</span><br><span class="line">ans = <span class="number">-1</span>;</span><br><span class="line">ans = dfs(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; dance_link_rep;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dance_link_rep dl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t, n;</span><br><span class="line"><span class="keyword">int</span> i, j, k, s, p, x, y, c, flag, ans;</span><br><span class="line"><span class="keyword">int</span> rows, cols;</span><br><span class="line"><span class="keyword">int</span> ds[<span class="number">2</span> * MAX_N], dst;</span><br><span class="line"><span class="keyword">int</span> ms[<span class="number">2</span> * MAX_N][<span class="number">2</span> * MAX_N];</span><br><span class="line"><span class="keyword">int</span> as[dl.MAX_ROWS * dl.MAX_COLS][<span class="number">2</span>], ast;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;dst);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; dst; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ds[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(ms, <span class="number">0</span>, <span class="keyword">sizeof</span>(ms));</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>, c = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = !(i % <span class="number">2</span>); j &lt;= <span class="number">2</span> * n; j += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">ms[i][j] = c;</span><br><span class="line"><span class="keyword">for</span>(s = <span class="number">0</span>; s &lt; dst; s++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c == ds[s])</span><br><span class="line">&#123;</span><br><span class="line">ms[i][j] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">c++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c = <span class="number">1</span>;</span><br><span class="line">ast = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; x &lt; <span class="number">2</span> * n; x += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(y = <span class="number">0</span>; y &lt; <span class="number">2</span> * n; y += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(s = <span class="number">1</span>; s + x / <span class="number">2</span> &lt;= n &amp;&amp; s + y / <span class="number">2</span> &lt;= n; s++)</span><br><span class="line">&#123;</span><br><span class="line">k = ast;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">i = x;</span><br><span class="line">j = y + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(p = <span class="number">0</span>; p &lt; s; p++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ms[i][j] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">as[k][<span class="number">0</span>] = ms[i][j];</span><br><span class="line">as[k][<span class="number">1</span>] = c;</span><br><span class="line">k++;</span><br><span class="line">j += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">i += <span class="number">1</span>;</span><br><span class="line">j -= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(p = <span class="number">0</span>; p &lt; s; p++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ms[i][j] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">as[k][<span class="number">0</span>] = ms[i][j];</span><br><span class="line">as[k][<span class="number">1</span>] = c;</span><br><span class="line">k++;</span><br><span class="line">i += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">i -= <span class="number">1</span>;</span><br><span class="line">j -= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(p = <span class="number">0</span>; p &lt; s; p++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ms[i][j] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">as[k][<span class="number">0</span>] = ms[i][j];</span><br><span class="line">as[k][<span class="number">1</span>] = c;</span><br><span class="line">k++;</span><br><span class="line">j -= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">i -= <span class="number">1</span>;</span><br><span class="line">j += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(p = <span class="number">0</span>; p &lt; s; p++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ms[i][j] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">as[k][<span class="number">0</span>] = ms[i][j];</span><br><span class="line">as[k][<span class="number">1</span>] = c;</span><br><span class="line">k++;</span><br><span class="line">i -= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ast = k;</span><br><span class="line">c++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rows = <span class="number">2</span> * n * (n + <span class="number">1</span>);</span><br><span class="line">cols = c - <span class="number">1</span>;</span><br><span class="line">dl.init(rows, cols);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; ast; i++)</span><br><span class="line">&#123;</span><br><span class="line">dl.add_node(as[i][<span class="number">0</span>], as[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ans = dl.solve(<span class="literal">true</span>, <span class="literal">NULL</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;舞蹈链重复覆盖问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="舞蹈链" scheme="http://nchuacm.github.io/tags/%E8%88%9E%E8%B9%88%E9%93%BE/"/>
    
      <category term="poj" scheme="http://nchuacm.github.io/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>FZU-1686 神龙的难题</title>
    <link href="http://nchuacm.github.io/acm/fzu-1686/"/>
    <id>http://nchuacm.github.io/acm/fzu-1686/</id>
    <published>2020-03-19T11:00:07.000Z</published>
    <updated>2021-12-24T08:56:11.304Z</updated>
    
    <content type="html"><![CDATA[<p>舞蹈链重复覆盖问题</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>&emsp;&emsp;<a href="http://acm.fzu.edu.cn/problem.php?pid=1686" target="_blank" rel="noopener">http://acm.fzu.edu.cn/problem.php?pid=1686</a></p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>&emsp;&emsp;中文题，又可以偷懒了！</p><h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><p>&emsp;&emsp;计算出地图上所有怪物的个数，假设为$K$个，给怪物从1到K进行编号。然后枚举每一种神龙攻击的情况，也就是枚举神龙攻击范围的左上角坐标，行坐标一共有$n-n1+1$种情况，列坐标一共有$m-m1+1$种情况，所以一共有$(n-n1+1) \times (m-m1+1)$种攻击情况，假设为$P=(n-n1+1) \times (m-m1+1)$。然后构建一个$P \times K$的矩阵$M$，然后第$i$种攻击情况能攻击到第$j$个怪物，则$M$的第$i$行的第$j$个元素为$1$，否则为$0$。最后用舞蹈链对$M$求重复覆盖问题就好了。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* http://acm.fzu.edu.cn/problem.php?pid=1686 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">17</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dance_link</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_ROWS = MAX_N * MAX_N;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_COLS = MAX_N * MAX_N;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> u, d, l, r;</span><br><span class="line"><span class="keyword">int</span> row, col;</span><br><span class="line">&#125; node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rows, cols, node_size;</span><br><span class="line">node nd[MAX_ROWS * MAX_COLS];</span><br><span class="line"><span class="keyword">int</span> row_head[MAX_ROWS], col_nds[MAX_COLS];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> is_min_ans;</span><br><span class="line"><span class="keyword">int</span> limit;</span><br><span class="line"><span class="keyword">int</span> ans, *select_rows;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> rows, <span class="keyword">int</span> cols)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span> -&gt; rows = rows;</span><br><span class="line"><span class="keyword">this</span> -&gt; cols = cols;</span><br><span class="line"><span class="comment">/* 初始化每一列的头节点 */</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= cols; i++)</span><br><span class="line">&#123;</span><br><span class="line">nd[i].u = i;</span><br><span class="line">nd[i].d = i;</span><br><span class="line">nd[i].l = i - <span class="number">1</span>;</span><br><span class="line">nd[i].r = i + <span class="number">1</span>;</span><br><span class="line">col_nds[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">nd[<span class="number">0</span>].l = cols;</span><br><span class="line">nd[cols].r = <span class="number">0</span>;</span><br><span class="line">node_size = cols + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化每一行的行指针 */</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= rows; i++)</span><br><span class="line">&#123;</span><br><span class="line">row_head[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_node</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* nd[node_size]为新添加的节点 */</span></span><br><span class="line">nd[node_size].row = row;</span><br><span class="line">nd[node_size].col = col;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将新添加的节点与其所在的列连接 */</span></span><br><span class="line">nd[node_size].u = col;</span><br><span class="line">nd[node_size].d = nd[col].d;</span><br><span class="line">nd[nd[col].d].u = node_size;</span><br><span class="line">nd[col].d = node_size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将新添加的节点与其所在的行连接 */</span></span><br><span class="line"><span class="keyword">if</span>(row_head[row] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">row_head[row] = node_size;</span><br><span class="line">nd[node_size].l = node_size;</span><br><span class="line">nd[node_size].r = node_size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> row_first = row_head[row];</span><br><span class="line">nd[node_size].r = row_first;</span><br><span class="line">nd[node_size].l = nd[row_first].l;</span><br><span class="line">nd[nd[row_first].l].r = node_size;</span><br><span class="line">nd[row_first].l = node_size;</span><br><span class="line">&#125;</span><br><span class="line">col_nds[col]++;</span><br><span class="line">node_size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove_rep</span><span class="params">(<span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = nd[col].d; i != col; i = nd[i].d)</span><br><span class="line">&#123;</span><br><span class="line">nd[nd[i].r].l = nd[i].l;</span><br><span class="line">nd[nd[i].l].r = nd[i].r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resume_rep</span><span class="params">(<span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = nd[col].u; i != col; i = nd[i].u)</span><br><span class="line">&#123;</span><br><span class="line">nd[nd[i].l].r = i;</span><br><span class="line">nd[nd[i].r].l = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 计算取得答案最少需要的行数 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_min_rows</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k, num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> v[MAX_COLS];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = nd[<span class="number">0</span>].r; i != <span class="number">0</span>; i = nd[i].r)</span><br><span class="line">&#123;</span><br><span class="line">v[i] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = nd[<span class="number">0</span>].r; i != <span class="number">0</span>; i = nd[i].r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v[i] == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">num++;</span><br><span class="line"><span class="keyword">for</span>(j = nd[i].d; j != i; j = nd[j].d)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(k = nd[j].r; k != j; k = nd[k].r)</span><br><span class="line">&#123;</span><br><span class="line">v[nd[k].col] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs_rep</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">int</span> res, select_col;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断是否超过了界限 */</span></span><br><span class="line"><span class="keyword">int</span> mr = get_min_rows();</span><br><span class="line"><span class="keyword">if</span>(limit != <span class="number">-1</span> &amp;&amp; len + mr &gt; limit)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(is_min_ans == <span class="literal">true</span> &amp;&amp; ans != <span class="number">-1</span> &amp;&amp; len + mr &gt;= ans)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 当前十字链表没有列 */</span></span><br><span class="line"><span class="keyword">if</span>(nd[<span class="number">0</span>].r == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line">select_col = nd[<span class="number">0</span>].r;</span><br><span class="line"><span class="keyword">for</span>(i = nd[<span class="number">0</span>].r; i != <span class="number">0</span>; i = nd[i].r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(nd[i].d == i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(col_nds[select_col] &gt; col_nds[i])</span><br><span class="line">&#123;</span><br><span class="line">select_col = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = nd[select_col].d; i != select_col; i = nd[i].d)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(select_rows != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">select_rows[len] = nd[i].row;</span><br><span class="line">&#125;</span><br><span class="line">remove_rep(i);</span><br><span class="line"><span class="keyword">for</span>(j = nd[i].r; j != i; j = nd[j].r)</span><br><span class="line">&#123;</span><br><span class="line">remove_rep(j);</span><br><span class="line">&#125;</span><br><span class="line">res = dfs_rep(len + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(res &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(is_min_ans == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ans &lt; <span class="number">0</span> || ans &gt; res)</span><br><span class="line">&#123;</span><br><span class="line">ans = res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j = nd[i].l; j != i; j = nd[j].l)</span><br><span class="line">&#123;</span><br><span class="line">resume_rep(j);</span><br><span class="line">&#125;</span><br><span class="line">resume_rep(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">bool is_min_ans: 是否求答案最小值，如果不是，得到一个可行解就返回，默认求最小值。</span></span><br><span class="line"><span class="comment">int select_rows[]: 用于保存选择的行，取NULL时不保存，默认取NULL。</span></span><br><span class="line"><span class="comment">int limit：答案的上限，取-1时无上限，默认为-1。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">bool</span> is_min_ans = <span class="literal">true</span>, <span class="keyword">int</span> select_rows[] = <span class="literal">NULL</span>, <span class="keyword">int</span> limit = <span class="number">-1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;is_min_ans = is_min_ans;</span><br><span class="line"><span class="keyword">this</span>-&gt;select_rows = select_rows;</span><br><span class="line"><span class="keyword">this</span>-&gt;limit = limit;</span><br><span class="line">ans = <span class="number">-1</span>;</span><br><span class="line">ans = dfs_rep(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; dance_link;</span><br><span class="line"></span><br><span class="line">dance_link dl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, n1, m1;</span><br><span class="line"><span class="keyword">int</span> i, j, k, x, y, ans;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX_N][MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m) != EOF)</span><br><span class="line">&#123;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[i][j] != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">k++;</span><br><span class="line"><span class="built_in">map</span>[i][j] = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n1, &amp;m1);</span><br><span class="line"></span><br><span class="line">dl.init((n - n1 + <span class="number">1</span>) * (m - m1 + <span class="number">1</span>), k);</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; x + n1 &lt;= n; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(y = <span class="number">0</span>; y + m1 &lt;= m; y++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = x; i &lt; x + n1; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = y; j &lt; y + m1; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[i][j] != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">dl.add_node(k + <span class="number">1</span>, <span class="built_in">map</span>[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ans = dl.solve(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;舞蹈链重复覆盖问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="题解" scheme="http://nchuacm.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="舞蹈链" scheme="http://nchuacm.github.io/tags/%E8%88%9E%E8%B9%88%E9%93%BE/"/>
    
  </entry>
  
</feed>
